%!PS-Adobe-3.0 
%%Creator: Adobe Illustrator(R) 8.0
%%AI8_CreatorVersion: 13.0.0
%%For: (Stanis) ()
%%Title: (netvolution.ai)
%%CreationDate: 6/24/2010 4:53 PM
%%BoundingBox: 90 386 508 460
%%HiResBoundingBox: 90.7212 386.3164 507.7305 459.3135
%%DocumentProcessColors: Cyan Magenta Yellow Black
%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0
%%+ procset AGM_Gradient 1.0 0
%%+ procset Adobe_ColorImage_AI6 1.3 0
%%+ procset Adobe_Illustrator_AI5 1.3 0
%%+ procset Adobe_cshow 2.0 8
%%+ procset Adobe_shading_AI8 1.0 0
%AI5_FileFormat 4.0
%AI3_ColorUsage: Color
%AI7_ImageSettings: 0
%%CMYKProcessColor: 1 1 1 1 ([Rep\751rage] 1)
%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set) 
%%+ Options: 1 16 0 1 1 1 0 0 0 0 1 1 1 18 0 0 0 0 0 0 0 0 -1 -1 0 0 0 0 1 0 0 0 0 1 0 0 0 0 0 1 2 3 4
%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 1 0 () 
%AI3_TemplateBox: 298.5 420.3896 298.5 420.3896
%AI3_TileBox: 0.037598 0.074219 595.0576 841.9346
%AI3_DocumentPreview: None
%AI5_ArtSize: 595.2756 841.8898
%AI5_RulerUnits: 1
%AI5_ArtFlags: 0 0 0 1 0 0 1 0 0
%AI5_TargetResolution: 800
%AI5_NumLayers: 1
%AI8_OpenToView: -13.1978 484.8242 6.9885 1563 624 18 0 0 48 96 0 0
%AI5_OpenViewLayers: 7
%%PageOrigin:-16 30.8896
%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9
%AI9_Flatten: 1
%AI12_CMSettings: 00.MS
%AI7_Thumbnail: 128 24 8
%%BeginData: 5575 Hex Bytes
%0000330000660000990000CC0033000033330033660033990033CC0033FF
%0066000066330066660066990066CC0066FF009900009933009966009999
%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66
%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333
%3333663333993333CC3333FF3366003366333366663366993366CC3366FF
%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99
%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033
%6600666600996600CC6600FF6633006633336633666633996633CC6633FF
%6666006666336666666666996666CC6666FF669900669933669966669999
%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33
%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF
%9933009933339933669933999933CC9933FF996600996633996666996699
%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33
%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF
%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399
%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933
%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF
%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC
%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699
%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33
%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100
%000011111111220000002200000022222222440000004400000044444444
%550000005500000055555555770000007700000077777777880000008800
%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB
%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF
%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF
%524C45FD2DFFA83635FD1BFFA8A884FD10FFA87EFFFFFF84A8A8FD1CFFCA
%CFCACFCACFCACFCACFCACFCAFD1EFFA92F36A8FD1AFFAF7EA8A8FD0FFF7E
%84A8FFFFA87DA9FD1AFFC9C0FD0DC1C9FD1DFFA83635FD1BFFA9A87EFD10
%FFA87EFFFFFFA8A9A8FD1AFF98CFA8FFA8CAA8FFA8CAA8FFA8FFA7C1CFFF
%A8FFA8FFA8AFA8AFFD0AFFA8FFA8FD05FFA8840D5AA8FFA8FFA9FD07FFA8
%AFA8FFFFFFA8FFA8FD07FF7E84A8FFA8FFA8FD05FFA9FFA8FFAFFF7E84A8
%FFA8FFAFFD07FFA8FFA8FD07FFA8FFFFFFA8FFA9FFFFFFC1FF84355A355A
%365A355A365A5AFFC1FFFF842F84A85A35363584A9FD06FFAF84A87EA9A8
%FFFFFFAF5A2F5A355A2F5A2F84FD06FF5A3635FFFFFFA8A884A87EAFFD04
%FFA9A87EFFAFA87EFD06FFA97EA9FFA97EA884A87EA884A8A8FD05FF84A8
%7EA8A8FD05FF84A8A8FF7EA87EA8A8FFFF9EFF2F362F360D362F362F362F
%36A8C1CFFF593635350D5A2F350D5AA8FFFFFFA8847D847E847D847EFFFF
%FF2F352F5A2F352F352FAFFD04FFA8350D84FFFF7E847DA87E847DA8A8FF
%FFFF7D7EA8FF7E84A8FD05FFA87E84FF7E7E7D847E847D847DA8FFFFFFA8
%7D847E847D847EA9FFFFFF847EA87E847EA87E847EFFC1A85A2F5A3584A8
%FFA8FF7E3636CFC1FFFF842F5A35A9A9FF7E362F84FFFFA9A87EA8A8FFA9
%A97EA884FFFFFF84352FAFFFAF2F357EFD04FF7E0D5AFFFF7EA884AFA9FF
%A8A87EA8FFFFA8847EFFA8A884FD06FFA97EA9FFFFA9847DFFFFFF7E84A8
%FFFFA97EA8A8FFFFFF84A87EFFFFFF84A87EA9A9FFA9A97E84A89EFF2F35
%2F84FD05FFA80D5AA8C1CAFF59352FA9FD04FF7E2F2FFFFFA87D84A8FD05
%FF7E84A8FFFFA80D2FA8FFFF7E0C35A8FFFFAF2F0D7DFF847E7DFD05FFA8
%847DA8FFA8597EA8FF7D84A8FD05FF7E8484FFFFFF7D7EA8FFFF8459A8FF
%A97D84A8FD05FF7E847EFFA8A87E84A8FFFFFFAFA87DA8C1A85A2F5A7E7E
%7EFFFFFFA83635CFC1FFFF7E0D5AFD06FF2F36A8FF7E84A8FD06FFA97EA8
%FFFFA82F2FFFFFFFA8350D84FFFF7E2F2FFFFFA87EAFFD06FFA8847EFFA8
%7E7DFFA8A87EFD06FFA97EA8FFFFFF847DFFFFFF7E7EA8FFA88484FD07FF
%7E84A8FF7E84A8FD05FFA8847E9EFF2F2F2F0D2FA9FFFFFFA80D5AA8C1CA
%FF590D59FD05FFA82F0DA8FF7E7DFFA87E7D847D7E7D7E7DFFFFA80C2FA8
%FFFFFF590D2FFFA82F0C7EFFFF7D7EA8FD06FFA97D7EA9A9597EA8AF7D84
%A8FD05FF7E7E7EFFFFFF7D7DA8FFFF7E53A8FF8459A8FD06FFA9847DA8FF
%847DA8FD05FFAF7D7EC1A8592F2F2FFFFFA87DFFA82F2FCFC1FFFF7E0D7E
%FD06FF2F2FA8FF7D7EA8FF7D7E7D847D847D84A9FF842F2FFD05FF2E2F84
%840C35A9FFA87E7DFD07FFA87E7DFFA87D59FFA87E7DFD06FFA859A8FFFF
%A87E7DA9FFFF7D7D84FF7E7E84FD07FF7D7EA8FF7D7EA8FD05FFA87E7D98
%A82E2F2FFFFFA80C7EFF590C2FA8C1CFFF530D53FD05FFA82F0CA8CF7D53
%A8FD04FFA8FFFFFFA8FFFFA8062FA8FD04FF59062F2E0D59FFFFFF597D7E
%FD06FFA8597DFFA8537DA8FF597DA8FD05FF7D7D7DFFFFFF537DA8FFAF7E
%53A8FFA8537EA8FD05FFA87D53A9FF7D53A8FD05FFA8537DC1A8350C84FF
%A92F2F597E0C2F2FCF9FFFFF7E0C7EFD06FF2F2F84FF7E7D7DFD0BFF842F
%2FFD05FFA82F2E2F2EFD04FFA8597DA8FD05FF7D7D7EFFA87D59FFFF7E59
%A8FD04FFA87D59A8FFFFA87E59A9FFFF7D7D7EFFA87D59A8FD05FF7E597E
%FFFF7D7DA8FD05FFA87E7D98A82E2F2E7D2E2F2E2F062F0C2FA8C1CFFF53
%2E53FD05FFA82F06A8FFFF537D53A8A8A97E7D7DFD04FFA8062FA8FD05FF
%532F067DFD04FFA87D537D7DFFA8A8537D59FFFFA8537DA8FF7D5953A8A8
%A87D7D537D7DFFFFFF537DA8FFFF7E53A8FFFF7D595384A8A97E7D5359A8
%FFFF7D52A8FD05FFA8537DC1A82F0C2F0C2F2E2F2E2F2E2F2ECF98FFFF59
%0659FD06FF2E2F84FFFFA9597D537D597D537DA8FFFFFF842E2EFD06FFA9
%062FA8FD05FFA87D597D537D597D59FFFFFFA87D59FFFFFF7D7D537D597D
%597E59A8FFFFFF7D53A9FFFF7D7D84FFFFFF7D7D537D597D537DA8FFFFFF
%7D7DA8FD05FFA87D5998FF532F2E2F2E2F2E2F2E2F067ECA9FCAFF532E53
%FD05FFA82F06A8FD04FF7D7D537D597EA8FD04FFA8062FA8FD06FF5352FD
%07FFA8A8597D537D7DFD04FFA8537DA8FFFFFF7D7D537D7DA97D7D7DFFFF
%FF597DA8FFFF7D53A8FD04FF7E7D537D597EA8FFFFFFA87D53A8FD05FFA8
%537DC1C9FFA8CFCACFA8CFCACFA8CFCFC998FD15FFA9FD0FFFA9FFA8FD0B
%FFA8FD3CFFA09F9F9F99C19F9F99C19F9F99C199C9FD24FFA8A8FD06FFA8
%FD56FFA9FD05FFA8FD0FFFA8FD0AFFA9A8FD07FFA8FD54FFA8FFA8847EFF
%84A8A8A87EFFA8A8AFA87DFFFFA87DAFA884A8FFFFA87EFFA8A87EFFA8A8
%A8FFA8FF7DA8A8FFA8A87EFFA8A87EFFA8A8A8FD4AFFA9FFA8FFA9A9A9FF
%7EA8FFA9A8FFA8FFA8FF7EA9A9FFA8FFFFFFA8A8FFA8FFFFA8FFA8FFAFFF
%A8A9FFFFA8A9A8FFA8FFA8FFA8FFA8FD4AFFA8FFA8FFA8FFA8A8A884A8FF
%A8FFFFFD04A87EA8FFA8A8FD04FF7DFFA8A884FFFD04A87EFFA8FFA8A9FD
%05A8A9A8A8FFA8A8FD50FFA8FFA8A9FD06FFA8FFA9A9A9FFA8FD04FFA9FF
%FFA8FD05FFA8FFFFFFA8FFFFFFA8FFFFFFA9FFFFFFA8FDB7FFFF
%%EndData
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_level2_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)
%%Version: 1.2 0
%%CreationDate: (04/10/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_level2_AI5 26 dict dup begin
	put
	/packedarray where not
	{
		userdict begin
		/packedarray
		{
			array astore readonly
		} bind def
		/setpacking /pop load def
		/currentpacking false def
	 end
		0
	} if
	pop
	userdict /defaultpacking currentpacking put true setpacking
	/initialize
	{
		Adobe_level2_AI5 begin
	} bind def
	/terminate
	{
		currentdict Adobe_level2_AI5 eq
		{
		 end
		} if
	} bind def
	mark
	/setcustomcolor where not
	{
		/findcmykcustomcolor
		{
			(AI8_CMYK_CustomColor)
			6 packedarray
		} bind def
		/findrgbcustomcolor
		{
			(AI8_RGB_CustomColor)
			5 packedarray
		} bind def
		/setcustomcolor
		{
			exch 
			aload pop dup
			(AI8_CMYK_CustomColor) eq
			{
				pop pop
				4
				{
					4 index mul
					4 1 roll
				} repeat
				5 -1 roll pop
				setcmykcolor
			}
			{
				dup (AI8_RGB_CustomColor) eq
				{
					pop pop
					3
					{
						1 exch sub
						3 index mul 
						1 exch sub
						3 1 roll
					} repeat
					4 -1 roll pop
					setrgbcolor
				}
				{
					pop
					4
					{
						4 index mul 4 1 roll
					} repeat
					5 -1 roll pop
					setcmykcolor
				} ifelse
			} ifelse
		}
		def
	} if
	/setAIseparationgray
	{
		false setoverprint
		0 setgray
		/setseparationgray where{
			pop setseparationgray
		}{
			/setcolorspace where{
				pop
				[/Separation (All) /DeviceCMYK {dup dup dup}] setcolorspace
				1 exch sub setcolor
			}{
				setgray
			}ifelse
		}ifelse
	} def
	
	/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def
	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put
	userdict /level2?
	systemdict /languagelevel known dup
	{
		pop systemdict /languagelevel get 2 ge
	} if
	put
/level2ScreenFreq
{
 begin
		60
		HalftoneType 1 eq
		{
			pop Frequency
		} if
		HalftoneType 2 eq
		{
			pop GrayFrequency
		} if
		HalftoneType 5 eq
		{
			pop Default level2ScreenFreq
		} if
 end
} bind def
userdict /currentScreenFreq  
	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse put
level2? not
	{
		/setcmykcolor where not
		{
			/setcmykcolor
			{
				exch .11 mul add exch .59 mul add exch .3 mul add
				1 exch sub setgray
			} def
		} if
		/currentcmykcolor where not
		{
			/currentcmykcolor
			{
				0 0 0 1 currentgray sub
			} def
		} if
		/setoverprint where not
		{
			/setoverprint /pop load def
		} if
		/selectfont where not
		{
			/selectfont
			{
				exch findfont exch
				dup type /arraytype eq
				{
					makefont
				}
				{
					scalefont
				} ifelse
				setfont
			} bind def
		} if
		/cshow where not
		{
			/cshow
			{
				[
				0 0 5 -1 roll aload pop
				] cvx bind forall
			} bind def
		} if
	} if
	cleartomark
	/anyColor?
	{
		add add add 0 ne
	} bind def
	/testColor
	{
		gsave
		setcmykcolor currentcmykcolor
		grestore
	} bind def
	/testCMYKColorThrough
	{
		testColor anyColor?
	} bind def
	userdict /composite?
	1 0 0 0 testCMYKColorThrough
	0 1 0 0 testCMYKColorThrough
	0 0 1 0 testCMYKColorThrough
	0 0 0 1 testCMYKColorThrough
	and and and
	put
	composite? not
	{
		userdict begin
		gsave
		/cyan? 1 0 0 0 testCMYKColorThrough def
		/magenta? 0 1 0 0 testCMYKColorThrough def
		/yellow? 0 0 1 0 testCMYKColorThrough def
		/black? 0 0 0 1 testCMYKColorThrough def
		grestore
		/isCMYKSep? cyan? magenta? yellow? black? or or or def
		/customColor? isCMYKSep? not def
	 end
	} if
 end defaultpacking setpacking
%%EndResource
%%BeginResource: procset AGM_Gradient_Sep 1.0 0
%%Title: (AGM Gradient Procset)
%%Version: 1.0 0
%%CreationDate: (4/26/96) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /AGM_Gradient_Sep 5 dict dup begin put
/AGM_Gradient_Sep_private 100 dict def
/initialize{
	AGM_Gradient_Sep begin
	AGM_Gradient_Sep_private begin
	_compositeJob{
		initializeSinglePassSeps
	}{
		initializeMultiPassSeps
	}ifelse
	initializeSeps
	AGM_Gradient_private begin
		/_fillSD newSpotDict def
		/_rampSD newSpotDict def
		/_nCustomColorSD nd
 end
	AGM_Gradient_Sep_private 
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
	AGM_Gradient_Sep
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
 end
	
	currentdict readonly pop	
 end
}def
/terminate{
	currentdict AGM_Gradient_Sep eq{
	 end
	}if
}def
AGM_Gradient_Sep_private begin
/initializeSeps{
	/currentoverprint { _of } def
	_noImage not _level2PS not and{
		/linealFill{
			currentoverprint{
				0 0 1 1 rectfill
			}{
				mySave
				8 setImageParms
				_color{
					_nCustomColorSD begin
						cyan magenta yellow black
	
						_spotColor{
							spot1/tintImage spot1/tintValue get 1 exch sub makeByte8 put
							spot2/tintImage spot2/tintValue get 1 exch sub makeByte8 put
						}if
				 end
	
					4{
						makeByte8 4 1 roll
					}repeat
					true 4 _nCustomColorSD ncolorimage
				}{
					_nCustomColorSD/black get 1 exch sub makeByte8 
					_nCustomColorSD bwImage
				}ifelse
				myRestore
			}ifelse
		}def
	}if
	/_whiteBytes 1 makeByte8 pt
	 /knockOut{
		_noImage _level2PS or currentoverprint or{
			gsave
			false setoverprint
			1 setgray 
			0 0 1 1 rectfill
			grestore
		}{
			8 setImageParms _whiteBytes /_image load 5 execImage
		}ifelse
	}def
	/newSpotDict{
		11 dict dup begin
			/nSpots 2 def
			/spot1 7 dict def
			/spot2 7 dict def
	 end
	}def
	/initSpotData
	{
	 begin
			/name nd
			/tintImage nd
			/tintValue nd
			/spot_C nd
			/spot_M nd
			/spot_Y nd
			/spot_K nd
	 end
	}def
	/initSpotDict{
	 begin
			/cyanInk nd
			/magentaInk nd
			/yellowInk nd
			/blackInk nd
			/cyan nd
			/magenta nd
			/yellow nd
			/black nd
			spot1 initSpotData
			spot2 initSpotData
	 end
	}def
	/copySpotDict{
		/_dst xp
	 begin
			cyanInk magentaInk yellowInk blackInk
			cyan magenta yellow black
			spot1 spot2
	 end
		_dst begin
			/spot1 spot1 maxlength dict def
			/spot2 spot2 maxlength dict def
			spot2 copy pop
			spot1 copy pop
			/black xd
			/yellow xd
			/magenta xd
			/cyan xd
			/blackInk xd
			/yellowInk xd
			/magentaInk xd
			/cyanInk xd
	 end
	}def
	/setCustomColor
	{
		1 index /Black eq{
			6 1 roll 5 npop
			1 exch sub
			setgray
		}{
			6 1 roll _ccAry1 astore exch
			dup null eq{
				pop 0
			}if
			setcustomcolor
		}ifelse
	}def
	/setCStop{
		/_colorStyle exch pt
		
		_colorStyle 0 eq{
			0 0 0
			4 -1 roll
			1 exch sub
			_spotColor{
				/_colorStyle 3 pt
				/Black
				1 index
				1 exch sub
			}if
		}if
		_colorStyle 2 eq{
			3 npop
		}if
		_rampSD _fillSD copySpotDict
		
		_colorStyle 4 eq{ 
			pop
			9 2 roll 3 npop 6 -2 roll
		} if
		
		_colorStyle 3 eq _colorStyle 4 eq or{ 	
				
			_fillSD begin
				/_spot1 spot1 pt
				/_spot2 spot2 pt
		 end
			
			exch dup _spot1/name get eq{
				_spot1 _spot2
			}{
				_spot2 _spot1
			}ifelse
		 begin
			 begin
					/name xd
					1 exch sub /tintValue xd
					4{
						tintValue mul 4 1 roll
					}repeat
					_spotColor not{
						/tintValue null def
					}if
			 end
				/tintValue 0 def
		 end
		}if
		_fillSD nsetcustomcolor
	}def
	/renderCMYK{
		spot1/name get null eq
		spot2/name get null eq and
		dup not{
			pop
			spot1 spotConverted
		}if
		dup not{
			pop
			spot2 spotConverted
		}if
	}def
	/currentInk{
		true
		_inRipSep{
			currentcolorspace 0 get
			dup /DeviceGray eq
			1 index /DeviceCMYK eq or{
				pop
				currentcmykcolor add add add 0 eq{
					pop false
				}if
			}{
				/Separation eq{
					currentcolor 0 eq{
						pop false
					}if
				}if
			}ifelse
		}{
			currentgray 1 eq{
				pop false
			}if
		}ifelse
	}def
	/currentInkN{
	
		_nCustomColorSD begin
			/_spot1 spot1 pt
			/_spot2 spot2 pt
			renderCMYK
	 end
		{
			currentInk
		}{
			gsave
			_spot1 begin
				name null ne{
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
					currentInk
				}{
					false
				}ifelse
		 end
			_spot2 begin
				name null ne{
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
					currentInk
				}{
					false
				}ifelse
		 end
			grestore
			
			or
		} ifelse
	}def
	/fill_ /fill load def
	/fillOvp{
		currentoverprint{
			_inRipSep{
				currentcolorspace 0 get
				dup /DeviceGray eq
				1 index /DeviceCMYK eq or{
					pop
					currentcmykcolor add add add 0 eq{
						newpath
					}if
				}{
					/Separation eq{
						currentcolor 0 eq{
							newpath
						}if
					}if
				}ifelse
			}{
				currentgray 1 eq{
					newpath
				}if
			}ifelse
		}if
		fill_
	}def
	/fill{
		_nCustomColorSD begin
			/_spot1 spot1 pt
			/_spot2 spot2 pt
			renderCMYK
	 end
		
		{
			fillOvp
		}{
			_spot1 begin
				gsave
				name null ne{
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
				}{
					1 setgray
				}ifelse
				fillOvp 
				grestore
		 end
			_spot2 begin
				name null ne{
					gsave
					true setoverprint
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
					fillOvp
					grestore
				}if
		 end
			newpath
		}ifelse
	}def
	/expandSpot{
		_spotColor{
			/_len xp
			_rampSD begin
				spot1 begin
					tintImage null ne{
						tintImage _len expandOne /tintImage xd
					}if
			 end
				spot2 begin
					tintImage null ne{
						tintImage _len expandOne /tintImage xd
					}if
			 end
		 end
		}{
			pop
		}ifelse
	}def
	/rampImage{
		currentoverprint{
			rectImage
		}{
			_enabledSmoothShade{
				fillRamp
			}{
				_color{
					_rampSD begin
						/cyanInk _cyanData 0 ne def
						/magentaInk _magentaData 0 ne def
						/yellowInk _yellowData 0 ne def
						/blackInk _blackData 0 ne def
				 end
					
					_nSamples setImageParms
					_nSamples expandSpot
					_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
					true 4 _rampSD ncolorimage
				}{
					_rampSD begin
						/cyanInk false def
						/magentaInk false def
						/yellowInk false def
						/blackInk true def
				 end
					_nSamples setImageParms 
					_blackData _rampSD bwImage
				}ifelse
			}ifelse
		}ifelse
	}def
	/nsetcustomcolor where{
		pop
	}{
		/nsetcustomcolor
		{
			/_nCustomColorSD xp
			_nCustomColorSD begin
				4 copy
				/black xd
				/yellow xd
				/magenta xd
				/cyan xd
				4 copy
				0 ne /blackInk xd
				0 ne /yellowInk xd
				0 ne /magentaInk xd
				0 ne /cyanInk xd
		 end
			setcmykcolor
		}def
	}ifelse
	/nsetcustomcolorend where{
		pop
	}{
		/nsetcustomcolorend
		{
			/_nCustomColorSD null pt
		}def
	}ifelse
}def
/initializeSinglePassSeps{
	/_decodeNorm	[0 1] pt
	/_decodeInvert 	[1 0] pt
	/spotConverted
	{
	 begin
			name null eq{
				false
			}{
				tintValue null eq tintImage null eq and{
					true
				}{
					_inDistiller{
						false
					}{
						false
						currentpagedevice/SeparationColorNames get{name eq or}forall
						not
					}ifelse
				}ifelse
			}ifelse
	 end
	}def
	/dictImage
	{
		20 dict dup begin
			/Dict xd
			/Decode xd
			/DataSource xd
			/ImageMatrix xd
			/BitsPerComponent xd
			/Height xd
			/Width xd
			/ImageType 1 def
			Dict
	 end
		/_image load 1 execImage
	}def
	/bwImage{
	 begin
			gsave
			currentoverprint{
				blackInk{
					[/Separation /Black /DeviceGray{}] setcolorspace
					_decodeInvert dictImage
				}{
					5 npop
				}ifelse
			}{
				/DeviceGray setcolorspace
				_decodeNorm dictImage
			}ifelse
			grestore
	 end
	}def
	/ncolorimage where{
		pop
	}{
		/ncolorimage{
		 begin
				renderCMYK{
					cyanInk 
					magentaInk and
					yellowInk and
					blackInk and
					not
					currentoverprint 
					and{	
						pop pop
						gsave
						cyanInk{
							8 copy
							[/Separation /Cyan /DeviceGray{}] setcolorspace
							3 npop
							_decodeNorm dictImage
						}if
						magentaInk{
							8 copy
							[/Separation /Magenta /DeviceGray{}] setcolorspace
							4 -1 roll
							3 npop
							_decodeNorm dictImage
						}if
						yellowInk{
							8 copy
							[/Separation /Yellow /DeviceGray{}] setcolorspace
							4 -2 roll
							3 npop
							_decodeNorm dictImage
						}if
						blackInk{
							4 -3 roll
							[/Separation /Black /DeviceGray{}] setcolorspace
							3 npop
							_decodeNorm dictImage
						}{
							8 npop
						}ifelse
						grestore
					}{
						/_colorimage load 10 execImage
					}ifelse
				}{
					6 npop
					gsave
					spot1 begin
						name null ne tintImage null ne and{
							[/Separation name /DeviceGray{}] setcolorspace
							4 copy
							tintImage 
							name /Black eq{
								_decodeNorm
							}{
								_decodeInvert
							}ifelse 
							dictImage
						}{
							1 setgray fill
						}ifelse
				 end
					spot2 begin
						true setoverprint
						name null ne tintImage null ne and{
							[/Separation name /DeviceGray{}] setcolorspace
							tintImage 
							name /Black eq{
								_decodeNorm
							}{
								_decodeInvert
							}ifelse 
							dictImage
						}{
							4 npop
							1 setgray fill
						}ifelse
				 end
					grestore
				}ifelse
		 end
		}def
	}ifelse
	/getRampColorSpace{
		
		/_renderCMYK _rampSD begin renderCMYK end pt
		
		_renderCMYK not{
			_rampSD begin
				[/DeviceN 
					[
					spot1 begin
						name null ne tintImage null ne and{
							name
						}if
				 end
					spot2 begin
						name null ne tintImage null ne and{
							name
						}if
				 end
					]
					_inDistiller {
						/DeviceCMYK [
							spot1 begin
								name null ne tintImage null ne and{
									spot_C spot_M spot_Y spot_K 1
								}{
									0 0 0 0 0
								}ifelse
						 end
							spot2 begin
								name null ne tintImage null ne and{
									spot_C spot_M spot_Y spot_K 2
								}{
									0 0 0 0 0
								}ifelse
						 end
							5 1 roll 6 -2 roll add
							dup 1 eq {
								pop
								8 /index cvx 1 /exch cvx /sub cvx
								9 1 /roll cvx
							}{
								2 eq {
									8 /index cvx 1 /exch cvx /sub cvx
									10 1 /roll cvx
								}if
							}ifelse
							4 1 /roll cvx 5 -2 /roll cvx
							8 /index cvx /mul cvx /exch cvx 9 /index cvx /mul cvx /add cvx 7 1 /roll cvx
							3 1 /roll cvx 4 -2 /roll cvx
							7 /index cvx /mul cvx /exch cvx 8 /index cvx /mul cvx /add cvx 6 1 /roll cvx
							2 1 /roll cvx 3 -2 /roll cvx
							6 /index cvx /mul cvx /exch cvx 7 /index cvx /mul cvx /add cvx 5 1 /roll cvx
							5 /index cvx /mul cvx /exch cvx 6 /index cvx /mul cvx /add cvx 4 1 /roll cvx
							6 -2 /roll cvx /pop cvx /pop cvx
						] cvx bind
					}{
						/DeviceCMYK {}
					}ifelse
				] setcolorspace
		 end
			/_nColorSpace currentcolorspace pt
		}if
		
		_nSamples 1 gt{ 
			/_ndx 0 pt
			[blendColor] cvx exec
		}if
		_renderCMYK{
			/_C0 [currentcolor] pt
			/_C0_Space currentcolorspace pt
		}{
			/_C0 [
				_nCustomColorSD begin
					spot1 begin 
						name null ne{
							tintValue
						}if
				 end
					spot2 begin 
						name null ne{
							tintValue
						}if
				 end
			 end
			] pt
			/_C0_Space _nColorSpace pt
		}ifelse
		
		_nSamples 1 gt{ 
			/_ndx _nSamples 1 sub pt
			[blendColor] cvx exec
		}if
		_renderCMYK{
			/_C1 [currentcolor] pt
			/_C1_Space currentcolorspace pt
		}{
			/_C1 [
				_nCustomColorSD begin
					spot1 begin 
						name null ne{
							tintValue
						}if
				 end
					spot2 begin 
						name null ne{
							tintValue
						}if
				 end
			 end
			] pt
			/_C1_Space _nColorSpace pt
		}ifelse
		
		/_rampColorSpace _C0_Space pt
		_spotColor{
			nsetcustomcolorend
		}if
	}def
}def
/initializeMultiPassSeps{
	/invertXfer{
		[
		{
			1 exch sub
		}/exec load systemdict /currenttransfer get exec /exec load
		] cvx systemdict /settransfer get exec
	}def
	/ccThrough{
		gsave
		1 setCustomColor
		currentcmykcolor
		grestore
		add add add 0 ne
	}def
	/spotConverted
	{
	 begin
			_isCMYKSep not{
				false
			}{
				name null eq{
					false
				}{
					tintValue null eq tintImage null eq and{
						true
					}{
						spot_C spot_M spot_Y spot_K name ccThrough
					}ifelse
				}ifelse
			}ifelse
	 end
	}def
	/spotChannel
	{
		_isCMYKSep{
			pop false
		}{
			/_spotDict xp
				_spotDict/name get null eq{
					false
				}{
					_spotDict/spot_C get
					_spotDict/spot_M get
					_spotDict/spot_Y get
					_spotDict/spot_K get
					_spotDict/name get
					ccThrough 
				}ifelse
		}ifelse
	}def
	/getChannelData
	{
		_isCMYKSep dup{
			pop renderCMYK
		}if
		{
			_blackPlate{
				4 1 roll 3 npop blackInk
			}{
				_yellowPlate{
					4 2 roll 3 npop yellowInk
				}{
					_magentaPlate{
						4 3 roll 3 npop magentaInk
					}{
						3 npop cyanInk
					}ifelse
				}ifelse
			}ifelse
			{
				true /nonZeroData
			}{
				true /zeroData
			}ifelse
		}{
			4 npop
			spot1/name get null ne 
			spot1 spotChannel and{
				spot1/tintImage get dup null ne{
					false /nonZeroData
				}{
					pop false /noData
				}ifelse
			}{
				spot2/name get null ne 
				spot2 spotChannel and{
					spot2/tintImage get dup null ne{
						false /nonZeroData
					}{
						pop false /noData
					}ifelse
				}{
					false /noData
				}ifelse
			}ifelse
		}ifelse
	}def
	/renderChannelData
	{
		/_tmp xp
		_tmp /nonZeroData ne currentoverprint and{
			pop
			_tmp /zeroData eq{pop}if
			4 npop
		}{
			_tmp /nonZeroData eq{
				{
					invertXfer
				}if
					systemdict/image
				get 5 execImage
			}{
				pop
				_tmp /zeroData eq{pop}if
				4 npop
				knockOut
			}ifelse
		}ifelse
	}def
	/bwImage{
	 begin
			gsave
			dup dup dup
			getChannelData
			exch pop false exch
			renderChannelData
			grestore
	 end
	}def
	/ncolorimage{
	 begin
			pop pop
			gsave
			spot2/name get null ne spot2 spotChannel and{
				true setoverprint
			}if
			getChannelData 
			renderChannelData
			grestore
	 end
	}def
	/getRampColorSpace{
		
		/_renderCMYK _rampSD begin renderCMYK end pt
		
		_nSamples 1 gt{ 
			/_ndx 0 pt
			[blendColor] cvx exec
		}if
		
		_renderCMYK{
			/_C0 [currentcolor] pt
			/_C0_Space currentcolorspace pt
		}{
			/_C0 [
				_nCustomColorSD begin
					0
					spot1 begin 
						name null ne
						tintValue null ne and
						spot1 spotChannel and{
							pop tintValue
						}if
				 end
					spot2 begin 
						name null ne
						tintValue null ne and
						spot2 spotChannel and{
							pop tintValue
						}if
				 end
					1 exch sub
			 end
			] pt
			/_C0_Space /DeviceGray pt
		}ifelse
		
		_nSamples 1 gt{ 
			/_ndx _nSamples 1 sub pt
			[blendColor] cvx exec
		}if
		
		_renderCMYK{
			/_C1 [currentcolor] pt
			/_C1_Space currentcolorspace pt
		}{
			/_C1 [
				_nCustomColorSD begin
					0
					spot1 begin 
						name null ne
						tintValue null ne and
						spot1 spotChannel and{
							pop tintValue
						}if
				 end
					spot2 begin 
						name null ne
						tintValue null ne and
						spot2 spotChannel and{
							pop tintValue
						}if
				 end
					1 exch sub
			 end
			] pt
			/_C1_Space /DeviceGray pt
		}ifelse
		
		/_rampColorSpace _C0_Space pt
		_spotColor{
			nsetcustomcolorend
		}if
	}def
}def
end
end
defaultpacking setpacking
%%EndResource
%%BeginResource: procset AGM_Gradient 1.0 0
%%Title: (AGM Gradient Procset)
%%Version: 1.0 0
%%CreationDate: (4/26/96) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /AGM_Gradient 20 dict dup begin put
/AGM_Gradient_private 201 dict def
/initialize
{
	AGM_Gradient begin
	AGM_Gradient_private begin
	initializeVars
	
	/bd systemdict/mark get def
	/ed
		_level2PS 
		{
			(>>)
		}{
			(counttomark 2 idiv dup dict begin {def} repeat pop currentdict end)
		} ifelse
	cvx def
	
	_level2PS{
		initializeLev2
	}{
		initializeLev1
	}ifelse
	
	queryDevice
	
	initializeRectFill
	initializeShading
	initializeOps
	_producingSeps{
		AGM_Gradient_Sep/initialize get exec
	}{
		initializeComposite
	}ifelse
	_illustrator{
		/f{}def
		/F{}def
		/s{}def
		/S{}def
		/b{}def
		/B{}def
	}if
	/image where{
		/image get /_image xd
	}if
	/colorimage where{
		/colorimage get /_colorimage xd
	}if
	AGM_Gradient_private
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
	AGM_Gradient
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
 end
	
	currentdict readonly pop
 end
}def
/initializeAI
{
	pop pop 
	AGM_Gradient/AGM_Gradient_private get /_illustrator true put
	AGM_Gradient/initialize get exec
		AGM_Gradient begin
}def
/unload{
	systemdict/languagelevel known{
		systemdict/languagelevel get 2 ge{
			userdict/AGM_Gradient_Sep 2 copy known{
				undef
			}{
				pop pop
			}ifelse
			userdict/AGM_Gradient 2 copy known{
				undef
			}{
				pop pop
			}ifelse
		}if
	}if
}def
/terminate{
	currentdict AGM_Gradient eq{
	 end
	}if
}def
 
AGM_Gradient_private begin
/initializeVars{
	/_d255 256 array def
	0 1 255{
		_d255 exch dup 255 div put
	}bind for
	/_d255- 256 array def
	0 1 255{
		_d255- exch 1 _d255 2 index get sub put
	}bind for
	/_sSave nd
	/_dUserSpace matrix defaultmatrix def
	/_bUMatrix matrix def
	/_imageMatrix matrix def
	/_saveMatrix matrix def
	/_xm matrix def
	/_ccAry1 5 array def
	/_bbox 4 array pt
	/_level2PS 
		systemdict/languagelevel known dup{
			pop systemdict/languagelevel get 2 ge
		}if
	def
	/_level3PS
		_level2PS systemdict/shfill known and
	def
	currentdict /_illustrator known not{
		/_illustrator false def
	}if
	
}def
/initializeOps
{
	AGM_Gradient begin
	currentdict/Bc known not{
		/Bc{
		
			_renderFlag 2 eq _enabledSmoothShade or{
				6 npop
			}{
				pushBSpace
				_rampIndex 0 eq{
					pop pop
					setCStop
				}if
				linealFill
				popBSpace
			}ifelse
		
		}def
	}if
	
	currentdict/Bg known not{
		/Bg{
			10 npop
			/_gradName xp
			/_renderFlag xp
			/_enabledSmoothShade false pt
		
			_renderFlag 2 ne{
		
				_illustrator{
					_of setoverprint
				}if
		
				/_enabledSmoothShade 
					_level3PS{
						_usingSmoothShade
						_producingSeps not
						currentoverprint not or and
						_noImage not and
					}{
						false
					}ifelse
				pt
				
				_illustrator _eo and _renderFlag 3 eq or{
					eoclip
				}{
					clip
				}ifelse
		
				_gradNames _gradName 2 copy known{
					get
					mark exch aload pop
					/_gradType xp
					1 sub dup /_rampIndex xp
					/_maxRampIndex xp
					mark exch aload pop
					0 0
				}if
				pop pop
				getRampData
			}{
				mark mark
			}ifelse
		}def
	}if
	
	currentdict/Bm known not{
		/Bm{
			_renderFlag 2 ne{
				_gradType 0 eq{
					linealRamp
				}{
					radialGrad
				}ifelse
			}{
				6 npop
			}ifelse
		}def
	}if
	
	currentdict/Bh known not{
		/Bh{
			2 npop
			/_yHi xp
			/_xHi xp
			/_radHilite _xHi 0 ne _yHi 0 ne or pt
		}def
	}if
	
	currentdict/Bn known not{
		/Bn{
			AGM_Gradient_private begin
				dict /_gradNames xp
		 end
		}def
	}if
	
	currentdict/Bd known not{
		/Bd{
			AGM_Gradient begin
			AGM_Gradient_private begin
				/_nColorsBd xp
				/_gradType xp
				/_gradName xp
		}def
	}if
	
	currentdict/BD known not{
		/BD{
				currentdict/_gradNames known not{
					/_gradNames 20 dict def
				}if
				] _nColorsBd _gradType
				]  _gradName exch /_gradNames xput
		 end
		 end
		}def
	}if
	
	currentdict/Bb known not{
		/Bb{
		
			AGM_Gradient/AGM_Gradient_private get /_illustrator get not{
				AGM_Gradient begin
			}if
			AGM_Gradient_private begin
			_producingSeps{
				AGM_Gradient_Sep/AGM_Gradient_Sep_private get begin
			}if
			mySave
		}def
	}if
	
	currentdict/BB known not{
		/BB{
		
			/_tmp xp
			cleartomark cleartomark
		
			_tmp dup
			_renderFlag
		
			myRestore
		
			_producingSeps{
			 end
			}if
		
			_illustrator dup
		 end
			not {
			 end
			}if
		
			{
				2 ne exch 0 gt and{
					2 eq{
						s
					}{
						S
					}ifelse
				}{
					pop newpath
				}ifelse
			}{
				pop newpath
			}ifelse
		
		
		}def
	}if
	
	currentdict/Xm known not{
		/Xm{
			_xm astore pop
		}def
	}if
	
 end
}def
/queryDevice{
	/_inDistiller
		systemdict /currentdistillerparams known
	def
	/_inRipSep
		_level2PS{
			currentpagedevice/Separations 2 copy known{
				get
			}{
				pop pop false
			}ifelse
		}{
			false
		}ifelse
		_inDistiller or
	def
	/_noImage /lv1Fix where{
		pop lv1Fix
	}{
		false
	}ifelse
	def
	/_useShells where{
		/_useShells get /_usingShells xp
	}{
		/_usingShells false def
	}ifelse
	
	/_useSmoothShade where{
		pop
	}{
		/_useSmoothShade false def 
	}ifelse
	/_forceToCMYK where{
		pop
	}{
		/_forceToCMYK false def 
	}ifelse
	/_cyanPlate 1 0 0 0 testCMYKColorThrough def
	/_magentaPlate 0 1 0 0 testCMYKColorThrough def
	/_yellowPlate 0 0 1 0 testCMYKColorThrough def
	/_blackPlate 0 0 0 1 testCMYKColorThrough def
	/_compositeJob
		_cyanPlate _magentaPlate and _yellowPlate and _blackPlate and
	def
	/_isCMYKSep
		_cyanPlate _magentaPlate or _yellowPlate or _blackPlate or
	def
	/_compositeSpotDevice where{
		pop
	}{
		/_compositeSpotDevice _compositeJob not _inRipSep or{
			1
		}{
			0
		}ifelse
		def
	}ifelse
	/_producingSeps _compositeSpotDevice 0 ne def
	/_deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt def
	/_dpiThreshold where{
		pop
	}{
		/_dpiThreshold 600 def
	}ifelse
	/_screenFreqThreshold where{
		pop
	}{
		/_screenFreqThreshold 150 def
	}ifelse
	/_contoneDevice where{
		pop
	}{
		/_contoneDevice false def
	}ifelse
	/_subSampleOK 
		_deviceDPI _dpiThreshold le 
		currentScreenFreq _screenFreqThreshold le and 
		_contoneDevice not and 
	def
}def
/initializeRectFill{
	/rectfill where dup{
		exch pop not _producingSeps or
	}{
		not
	}ifelse
	{
		/rectfill{
			gsave
			newpath
			4 2 roll moveto
			1 index 0 rlineto
			0 1 index rlineto
			1 index neg 0 rlineto
			pop pop
			closepath
			fill
			grestore
		}def
	}if
}def
/initializeLev1{
	/currentScreenFreq{
		currentscreen pop pop
	}def
	/_byte 1 string def
	/colorimage where{
		pop
	}{
		/colorimage{
			pop pop
			/_blackTmp xp
			/_yellowTmp xp
			/_magentaTmp xp
			/_cyanTmp xp
			/_cnt 0 pt
			[
			_byte dup 0
			_cyanTmp 
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .3 /mul cvx
			_magentaTmp
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .59 /mul cvx
			_yellowTmp
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .11 /mul cvx
			_blackTmp 
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx
			/add cvx /add cvx /add cvx 1 /exch cvx /sub cvx
			/dup cvx 0 /lt cvx{
				pop 0
			}/if cvx
			/dup cvx 1 /gt cvx{
				pop 1
			}/if cvx
			255 /mul cvx /cvi cvx
			256 /mod cvx
			/dup cvx 0 /lt cvx{
				pop 0
			}/if cvx
			/put cvx
			/_cnt dup cvx 1 /add cvx /pt cvx
			] cvx
			bind
			/_image load 5 execImage
		}def
	}ifelse
}def
/initializeLev2{
	/level2ScreenFreq{
	 begin
		60
		HalftoneType 1 eq{
			pop Frequency
		}if
		HalftoneType 2 eq{
			pop GrayFrequency
		}if
		HalftoneType 5 eq{
			pop Default level2ScreenFreq
		}if
		 end
	}def
	/currentScreenFreq{
		currenthalftone level2ScreenFreq
	}def
}def
/initializeShading{
	_useSmoothShade _level3PS and{
		/_usingSmoothShade true pt
		initializeLev3_Ops
	}{
		/_usingSmoothShade false pt
	}ifelse
}def
/initializeLev3_Ops
{
	/initShFill{
		/_index _gradType 0 eq {0}{_maxRampIndex 1 sub} ifelse pt
		/_rampFuncsArray _maxRampIndex array pt
		/_boundsArray _maxRampIndex 1 sub array pt
		/_encodeArray _maxRampIndex 2 mul array pt
		/_beginCoord _rampPoint pt
		/_colorSpace null pt
		/_firstFill _rampIndex _maxRampIndex eq pt
		/_lastFill false pt
	}def
	/linealShFill{
		popBSpace
		_xm aload pop pushBSpace
		
		/_size _index 1 add pt
		_size _maxRampIndex lt {
			/_rampFuncsArray _rampFuncsArray 0 _size getinterval pt
			/_boundsArray _boundsArray 0 _size 1 sub getinterval pt
			/_encodeArray _encodeArray 0 _size 2 mul getinterval pt
		}if
		
		bd
			/ShadingType 2
			/ColorSpace _colorSpace
			_rgbInCMYK{
				/Function [
					_cData sampFunc
					_mData sampFunc
					_yData sampFunc
					_kData sampFunc
				]
			}{
				/Function 
					bd
						/FunctionType 3
						/Domain [0 1]
						/Functions _rampFuncsArray
						/Bounds _boundsArray
						/Encode _encodeArray
					ed
			}ifelse
			/Extend [_firstFill _lastFill]
			/Domain [0 1] 
			/Coords [_beginCoord 0 _endCoord 0]
		ed
		shfill
	}def
	
	/radialShFill{
		/_size _maxRampIndex _index sub pt
		_size _maxRampIndex lt {
			/_rampFuncsArray _rampFuncsArray _index _size getinterval pt
			/_boundsArray _boundsArray _index _size 1 sub getinterval pt
			/_encodeArray _encodeArray _index 2 mul _size 2 mul getinterval pt
		}if
		
		/_rampLen _beginCoord _endCoord sub pt
		bd
			/ShadingType 3
			/ColorSpace _colorSpace
			_rgbInCMYK{
				/Function [
					_cData sampFunc
					_mData sampFunc
					_yData sampFunc
					_kData sampFunc
				]
			}{
				/Function 
					bd
						/FunctionType 3
						/Domain [0 1]
						/Functions _rampFuncsArray
						/Bounds _boundsArray
						/Encode _encodeArray
					ed
			}ifelse
			/Extend [_lastFill _firstFill]
			/Domain [0 1] 
			/Coords [_xHi _rampLen mul _yHi _rampLen mul _endCoord 0 0 _beginCoord] 
		ed
		shfill
		
		_radHilite{
			_xHi _rampLen mul _yHi _rampLen mul translate
		}if
	}def
	
	%
	/sampFunc{
		/_tmp exch pt
		bd
			_tmp length 1 eq {
				_tmp 0 get
				/_tmp 2 string pt
				dup _tmp 0 3 -1 roll put
				_tmp 1 3 -1 roll put
			}if
			/FunctionType 0
			/Order 1
			/Size [_tmp length]
			/Domain [0 1]
			/BitsPerSample 8
			/DataSource _tmp
			/Range [0 1]
		ed
	}def
	
	/fillRamp{
	
	
		/_invert _midPoint 0.5 lt pt
		_rampIndex _maxRampIndex eq {
			initShFill
		}if
		
		getRampColorSpace
		
		_colorSpace null eq{
			/_colorSpace _rampColorSpace pt
		}{
			_colorSpace _rampColorSpace ne _rgbInCMYK or{
				/_index _index 1 
				_gradType 0 eq{
					sub pt
					linealShFill
				}{
					add pt
					radialShFill
				}ifelse
				initShFill
				/_colorSpace _rampColorSpace pt
			} if
		}ifelse
		/_endCoord _endPoint pt	
		/_rgbInCMYK false pt
		_producingSeps _forceToCMYK or _rgbRamp and {
			_spotColor{
				_renderCMYK
			}{
				_isCMYKSep
			}ifelse
		}{
			false
		}ifelse
		{
			_compositeJob{
				/_rgbInCMYK true pt
				_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
				dup length string copy /_kData exch pt
				dup length string copy /_yData exch pt
				dup length string copy /_mData exch pt
				dup length string copy /_cData exch pt
			}{
				_rampFuncsArray _index
					_cyanPlate{_cyanData}if
						_magentaPlate{_magentaData}if
						_yellowPlate{_yellowData}if
						_blackPlate{_blackData}if
					_nSamples expandOne
					sampFunc
					dup begin /Decode [1 0] def end
				put
				/_invert false pt
			}ifelse
		}{
			_rampFuncsArray _index
				bd
					/FunctionType 2
					/Domain [0 1]
					/N 0.5 log _invert{1 _midPoint sub}{_midPoint}ifelse log div
					_gradType 0 eq{
						_invert{/C1}{/C0}ifelse _C0
						_invert{/C0}{/C1}ifelse _C1
					}{
						_invert{/C0}{/C1}ifelse _C1
						_invert{/C1}{/C0}ifelse _C0
					}ifelse
				ed
			put
		}ifelse
		
		_rampIndex 1 ne{
			_boundsArray _index _gradType 1 eq{1 sub}if _endCoord put
		} if
		
		0 1 _invert {exch}if
		_encodeArray _index 2 mul 1 add 3 -1 roll put
		_encodeArray _index 2 mul 3 -1 roll put
		_rampIndex 1 eq {
			/_lastFill true pt
			_gradType 0 eq{
				linealShFill
			}{
				radialShFill
			}ifelse
		}if
		/_index _index 1 
		_gradType 0 eq{
			add pt
		}{
			sub pt
		}ifelse
	}def
}def
/initializeComposite{
	/bwImage{
		pop /_image load 5 execImage 
	}def
	/rampImage{
		_enabledSmoothShade{
			fillRamp
		}{
			_color{
				_nSamples setImageParms
	
				
				_rgbRamp _forceToCMYK not and{
					_redData _greenData _blueData _nSamples 3 expandColor
					true 3 null ncolorimage
				}{
					_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
					true 4 null ncolorimage
				}ifelse
			}{
				_nSamples setImageParms _blackData null bwImage
			}ifelse
		}ifelse
	}def
	/setCStop{
		/_colorStyle exch pt
		_colorStyle 0 eq{
			1 exch sub
			0 0 0
			4 -1 roll
		}if
		
		_colorStyle 2 eq{
			_forceToCMYK{
				3 npop setcmykcolor
			}{
				setrgbcolor 4 npop
			}ifelse
		}if
		
		_colorStyle 3 eq{
			1 exch sub /_tmp xp
			pop
			4{
				_tmp mul 4 1 roll
			}repeat
		}if
		
		_colorStyle 4 eq{
			_forceToCMYK{
				6 npop setcmykcolor
			}{
				3 -1 roll pop pop
				1 exch sub /_tmp xp
				3{
					1 exch sub _tmp mul 1 exch sub 3 1 roll
				}repeat
				setrgbcolor 
				4 npop
			}ifelse
		}if
		_colorStyle 2 ne _colorStyle 4 ne and{
			null nsetcustomcolor
		}if
	}def
	/nsetcustomcolor
	{
		pop setcmykcolor
	}def
	/nsetcustomcolorend
	{
	}def
	/ncolorimage{
		pop 
		/_colorimage load 10 execImage
	}def
	_noImage not _level2PS not and{
		/linealFill{
			8 setImageParms
			_color{
				currentcmykcolor
				4{
					makeByte8 4 1 roll
				}repeat
				true 4 null ncolorimage
			}{
				currentgray makeByte8 null bwImage
			}ifelse
		}def
	}if
	/getRampColorSpace{
		_nSamples 1 gt{ 
			/_ndx 0 pt
			[blendColor] cvx exec
		}if
		/_C0 [currentcolor] pt
		/_C0_Space currentcolorspace pt
		
		_nSamples 1 gt{ 
			/_ndx _nSamples 1 sub pt
			[blendColor] cvx exec
		}if
		/_C1 [currentcolor] pt
		/_C1_Space currentcolorspace pt
		
		/_rampColorSpace _C0_Space pt
		
		_spotColor{
			nsetcustomcolorend
		}if
	}def
}def
/npop{
	{pop}repeat
}def
/xd{
	exch def
}def
/nd{
	null def
}def
/pt{
	AGM_Gradient_private 3 1 roll put
}def
/xp{
	exch pt
}def
/xput{
	dup load dup length exch maxlength eq{
		dup dup load dup
		length 2 mul dict copy def
	}if
	load begin
		def
  end
}def
/mySave{
	save /_sSave xp
}def
/myRestore{
	_sSave type /savetype eq{
		_sSave restore
	}if
}def
/gMark{
	counttomark 2 add -1 roll
}def
/execImage{
	/_tmp xp
	{
		exec
	}stopped{
		$error /errorname get /undefinedresult ne{
			stop
		}{
			_tmp npop
		}ifelse
	}if
}def
/pushBSpace{
	newpath gsave
	_bUMatrix astore concat 
}def
/popBSpace{
	grestore
}def
/makeByte8{
	/_tmp 0 pt
	255 mul cvi
	8 string 8{
		dup _tmp 3 index put 
		/_tmp _tmp 1 add pt
	}repeat
	exch pop
}def
/setImageParms{
	1 8 2 index 0 0 1 0 0 _imageMatrix astore
}def
/linealFill{
	0 0 1 1 rectfill
}def
/testCMYKColorThrough{
	gsave
	setcmykcolor currentcmykcolor
	grestore
	add add add 0 ne
}def
/expandOne	{
	/_tmp xp
	dup type /stringtype ne{
		_tmp string
		exch
		dup 0 ne{
			255 mul cvi
			0 1 _tmp 1 sub{
				3 copy
				exch put pop
			}for
		}if
		pop
	}if
}def
/expandColor{
	/_channels xp
	/_len xp
	_channels{
		_len expandOne _channels 1 roll
	}repeat
}def
/blendColor{
	
	_color{
		_rgbRamp _producingSeps not and _forceToCMYK not and{
			_redData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_greenData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_blueData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			/setrgbcolor cvx
		}{
			_cyanData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_magentaData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_yellowData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_blackData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
	
			_spotColor{
				_rampSD begin
					/_rampSD cvx /begin cvx
	
					spot1 begin
						tintImage dup type /stringtype eq{
							/_ndx cvx /get cvx _d255- /exch cvx /get cvx
						}{
							dup null ne{
								name type /nametype ne{
									1 exch sub
								}if
							}if
						}ifelse
				 end
					/spot1 cvx /tintValue 3 -1 /roll cvx /put cvx
	
					spot2 begin
						tintImage dup type /stringtype eq{
							/_ndx cvx /get cvx _d255- /exch cvx /get cvx
						}{
							dup null ne{
								name type /nametype ne{
									1 exch sub
								}if
							}if
						}ifelse
				 end
					/spot2 cvx /tintValue 3 -1 /roll cvx /put cvx
					/end cvx
			 end
				/_rampSD cvx
				/nsetcustomcolor cvx
			}{
				/setcmykcolor cvx
			}ifelse
		}ifelse
	}{
		_blackData dup type /stringtype eq{
			/_ndx cvx /get cvx _d255 /exch cvx /get cvx
		}if
		
		_enabledSmoothShade{
			1 /exch cvx /sub cvx 0 0 0 4 -1 /roll cvx /setcmykcolor cvx
		}{
			 /setgray cvx
		}ifelse
	}ifelse
}def
/useRectImage{
	_subSampleOK _enabledSmoothShade not and{
		{
			mark
			0 1 dtransform atan cvi 90 mod 0 eq
			1 0 dtransform atan cvi 90 mod 0 eq
		} stopped
		{
			cleartomark
			false
		}
		{
			and exch pop
		} ifelse
	}{
		false
	}ifelse
}def
/linealImage{
	_noImage{
		rectImage
	}{
		_producingSeps{
				AGM_Gradient_Sep/AGM_Gradient_Sep_private get
				/rampImage get exec
		}{
			useRectImage{
				rectImage
			}{
				rampImage
			}ifelse
		}ifelse
	}ifelse
}def
/linealRamp{
	pushBSpace
	_ramp{
		linealImage
	}{
		linealFill
	}ifelse
	popBSpace
	/_rampIndex _rampIndex 1 sub pt
	_rampIndex 0 gt{
		getRampData
	}if
}def
/radialGrad{
	/_usingShells currentoverprint _producingSeps and _usingShells or pt
	/_firstShell true pt
	_enabledSmoothShade not{
		currentoverprint _producingSeps and{
			
			newpath
			clippath pathbbox 
			1 add 4 1 roll
			1 add 4 1 roll
			1 sub 4 1 roll
			1 sub 4 1 roll
			_bbox astore pop
			
			newpath
			_bbox 0 get _bbox 1 get moveto
			_bbox 2 get _bbox 1 get lineto
			_bbox 2 get _bbox 3 get lineto
			_bbox 0 get _bbox 3 get lineto
			closepath
			6 copy
			gsave _bUMatrix astore concat
			1 0 moveto 0 0 1 0 360 arc closepath
			eoclip fill
			popBSpace
		}{
			fill
		}ifelse
	}if
	pushBSpace
	
	_radHilite{
		_xHi _yHi _bUMatrix idtransform /_yHi xp /_xHi xp
		_rampPoint 1 lt{
			1 _rampPoint sub dup _xHi mul exch _yHi mul translate
		}if
	}if
	_rampIndex{
		radialRamp
		/_rampIndex _rampIndex 1 sub pt
		_rampIndex 0 gt{
			getRampData
		}if
	}repeat
	
	popBSpace
	
}def
/getNSamples{
	0 exch
	{
		dup type /stringtype eq{
			length exch pop exit
		}if
		pop
	}forall
	dup 0 eq{
		pop 1
	}if
}def
/getRampData{
	/_rampType gMark pt
	/_color _rampType 0 gt pt
	/_ccRGB _rampType 5 eq _rampType 6 eq or pt
	/_rgbRamp _rampType 4 eq _ccRGB or pt
	/_ccProcess _rampType 2 eq _rampType 3 eq or pt
	_producingSeps{
		_rampSD initSpotDict
		/_spotColor _ccProcess _ccRGB or pt
	}{
		/_spotColor false pt
	}ifelse
	/_ramp true pt
	100 div /_rampPoint xp
	100 div /_midPoint xp
	
	dup /_colorStyle xp
	_colorStyle 0 eq{ 
		2
	}{
		_colorStyle 1 eq{ 
			5
		}{
			_colorStyle 2 eq{
				8
			}{
				_colorStyle 3 eq{
					_producingSeps{
						_rampSD /spot1 get begin
							/name 3 index def
							/spot_K 4 index def
							/spot_Y 5 index def
							/spot_M 6 index def
							/spot_C 7 index def
					 end
					}if
					7
				}{
					_producingSeps{
						_rampSD/spot1 get begin
							/name 4 index def
							/spot_K 8 index def
							/spot_Y 9 index def
							/spot_M 10 index def
							/spot_C 11 index def
					 end
					}if
					11
				} ifelse
			}ifelse
		}ifelse
	}ifelse
	/_tmp xp
	_tmp index 100 div /_endPoint xp
	
	_gradType 1 eq{
		_tmp 1 add index 100 div /_midPoint xp
	}if
	
	_producingSeps{
		_tmp 2 add index /_nextColorStyle xp
		_nextColorStyle 3 eq{
			/_tmp _tmp 4 add pt
			_tmp index dup
			_rampSD/spot1 get /name get ne{
				_rampSD /spot2 get begin
					/name xd
					/spot_K _tmp 2 add index def
					/spot_Y _tmp 3 add index def
					/spot_M _tmp 4 add index def
					/spot_C _tmp 5 add index def
			 end
			}{
				pop
			}ifelse
		}if
		_nextColorStyle 4 eq{
			/_tmp _tmp 5 add pt
			_tmp index dup
			_rampSD/spot1 get /name get ne{
				_rampSD /spot2 get begin
					/name xd
					/spot_K _tmp 5 add index def
					/spot_Y _tmp 6 add index def
					/spot_M _tmp 7 add index def
					/spot_C _tmp 8 add index def
			 end
			}{
				pop
			}ifelse
		}if
	}if
	_rampType 3 eq _rampType 6 eq or{
		/_tint2Data gMark pt
	}if
	_ccProcess _ccRGB or{
		/_tint1Data gMark pt
	}if
	_rgbRamp{
		/_blueData gMark pt
		/_greenData gMark pt
		/_redData gMark pt
	}if
	
	_producingSeps{
		_ccProcess _ccRGB or{
			_rampType 3 eq _rampType 6 eq or{
				_rampSD /spot2 get begin
					/tintImage _gradType 0 eq{
						_tint2Data
					}{
						_tint1Data
					}ifelse
					def
					name null eq{
						/name /Black def
					}if
			 end
			}if
			_rampSD /spot1 get begin
				/tintImage _gradType 0 eq _rampType 2 eq or _rampType 5 eq or{
					_tint1Data
				}{
					_tint2Data
				}ifelse
				def
				_rampType 2 eq _rampType 5 eq or{
					name null eq{
						/name _rampSD/spot2 get /name get def
						/spot_C _rampSD/spot2 get /spot_C get def
						/spot_M _rampSD/spot2 get /spot_M get def
						/spot_Y _rampSD/spot2 get /spot_Y get def
						/spot_K _rampSD/spot2 get /spot_K get def
						_rampSD/spot2 get /name null put
					}if
				}{
					name null eq{
						/name /Black def
					}if
				}ifelse
		 end
		}if
	}if
	/_blackData gMark pt
	_rampType 0 gt{
		counttomark 4 add -3 roll
		/_yellowData xp
		/_magentaData xp
		/_cyanData xp
	}if
	_ramp{
		/_nSamples
			[
			_rampType 0 eq {_blackData}if
			_rampType 1 eq {_cyanData _magentaData _yellowData _blackData}if
			_rampType 2 eq {_cyanData _magentaData _yellowData _blackData _tint1Data}if
			_rampType 3 eq {_cyanData _magentaData _yellowData _blackData _tint1Data _tint2Data}if
			_rampType 4 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData}if
			_rampType 5 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData _tint1Data}if
			_rampType 6 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData _tint1Data _tint2Data}if
			] getNSamples pt
		_enabledSmoothShade not {/_ramp _nSamples 1 gt pt} if
	} if
	
	setCStop
}def
/rectImage{
	gsave
	/_sInc 1 pt
	/_bInc 1 _nSamples div pt
	/_nSubSamples _nSamples pt
	/_optimize false pt
		
	_subSampleOK{
		/_uRampLen 1 0 dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt pt
		/_pChange _uRampLen 0 eq{0}{_nSamples _uRampLen div}ifelse pt
		
		_pChange .5 gt dup /_optimize xp{
			/_nSubSamples _uRampLen 2 div round cvi dup 1 le{pop 2}if pt
			/_bInc 1 _nSubSamples div pt
			/_sInc _nSamples 1 sub _nSubSamples 1 sub div pt
		}if
	}if
	0
	_nSubSamples
	[
	/dup cvx
	_optimize {
		/round cvx /cvi cvx
	} if
	/_ndx /exch cvx /pt cvx
	blendColor
	0 0 _bInc 1 /rectfill cvx
	_bInc 0 /translate cvx
	_sInc /add cvx
	] cvx
	bind
	repeat
	pop
	_spotColor{
		nsetcustomcolorend
	}if
	grestore
}def
/radialInit{
	/_nRadSamples _nSamples dup 0 eq{pop 1}if pt
	/_sInc -1 pt
	/_rampLen _rampPoint _endPoint sub pt
	/_bInc _rampLen _nSamples div neg pt
	/_optimize false pt
	_subSampleOK{
		/_uRampLen
			_rampLen 0 dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt
			0 _rampLen dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt
			2 copy lt{
				exch
			}if pop
		pt
		/_pChange 
			_uRampLen 0 eq{
				0
			}{
				_nSamples _uRampLen div
			}ifelse
		pt
		_pChange .5 gt dup /_optimize xp{
			/_nRadSamples _uRampLen 2 div round cvi dup 1 le{pop 2}if pt
			/_bInc _rampLen _nRadSamples div neg pt
			/_sInc _nSamples 1 sub _nRadSamples 1 sub div neg pt
		}if
	}if
	_radHilite{
		/_xBCInc _xHi _rampLen mul _nRadSamples div pt
		/_yBCInc _yHi _rampLen mul _nRadSamples div pt
	}if
}def
/radialRamp{
	_enabledSmoothShade{
		fillRamp
	}{
		/_saveMatrix _saveMatrix currentmatrix def
		
		radialInit
	
		%
		%
		true
		_producingSeps _rgbRamp not and{
			_nSamples 1 gt{ 
				pop
				/_ndx 0 pt
				[blendColor] cvx exec
				currentInkN
				/_ndx _nSamples 1 sub pt
				[blendColor] cvx exec
				currentInkN
				or
			}if
		}if
		{
			_rampPoint
		
			_nSamples 1 sub
		
			_nRadSamples 
			[
				/dup cvx
		
				_optimize{
					/round cvx /cvi cvx
				}if
		
				/_ndx /exch cvx /pt cvx
				
				_usingShells{
					/_firstShell cvx{
						/_firstShell false pt
					}{
						0 0 3 index 360 0 arcn fill
					}/ifelse cvx
				}if
		
				blendColor
		
				_usingShells{
					0 0 3 /index cvx 0 360 /arc cvx 
				}{
					0 0 3 /index cvx 0 360 /arc cvx /fill cvx
				}ifelse
		
				/exch cvx _bInc /add cvx /exch cvx
		
				_sInc /add cvx
		
				_radHilite{
					_xBCInc _yBCInc /translate cvx
				}if
			] cvx bind
			repeat
		
			pop pop
		}{
			_usingShells{
				0 0 _rampPoint 360 0 arcn fill
			}if
		}ifelse
	
		_saveMatrix setmatrix
		
		_radHilite{
			_xHi _rampLen mul _yHi _rampLen mul translate
		}if
		
		_usingShells _rampIndex 1 eq and{
			fill
		}if
	
		_spotColor{
			nsetcustomcolorend
		}if
	}ifelse
}def
end
end
defaultpacking setpacking
%%EndResource
%%BeginProcSet: Adobe_ColorImage_AI6 1.3 0
userdict /Adobe_ColorImage_AI6 known not
{
	userdict /Adobe_ColorImage_AI6 53 dict put 
} if
userdict /Adobe_ColorImage_AI6 get begin
/initialize { 
	Adobe_ColorImage_AI6 begin
	Adobe_ColorImage_AI6 {
		dup type /arraytype eq {
			dup xcheck {
				bind
			} if
		} if
		pop pop
	} forall
} def
/terminate { end } def
currentdict /Adobe_ColorImage_AI6_Vars known not {
	/Adobe_ColorImage_AI6_Vars 41 dict def
} if
Adobe_ColorImage_AI6_Vars begin
	/plateindex -1 def
	/_newproc null def
	/_proc1 null def
	/_proc2 null def
	/sourcearray 4 array def
	/_ptispace null def
	/_ptiname null def
	/_pti0 0 def
	/_pti1 0 def
	/_ptiproc null def
	/_ptiscale 0 def
	/_pticomps 0 def
	/_ptibuf 0 string def
	/_gtigray 0 def
	/_cticmyk null def
	/_rtirgb null def
	/XIEnable true def
	/XIType 0 def
	/XIEncoding 0 def
	/XICompression 0 def
	/XIChannelCount 0 def
	/XIBitsPerPixel 0 def
	/XIImageHeight 0 def
	/XIImageWidth 0 def
	/XIImageMatrix null def
	/XIRowBytes 0 def
	/XIFile null def
	/XIBuffer1 null def
	/XIBuffer2 null def
	/XIBuffer3 null def
	/XIDataProc null def
	/XIColorSpace /DeviceGray def
	/XIColorValues 0 def
	/XIPlateList false def
end
/ci6colorimage /colorimage where {/colorimage get}{null} ifelse def
/ci6image systemdict /image get def
/ci6curtransfer systemdict /currenttransfer get def
/ci6curoverprint /currentoverprint where {/currentoverprint get}{{_of}} ifelse def
/ci6foureq {
	4 index ne {
		pop pop pop false
	}{
		4 index ne {
			pop pop false
		}{
			4 index ne {
				pop false
			}{
				4 index eq
			} ifelse
		} ifelse
	} ifelse
} def
/ci6testplate {
	Adobe_ColorImage_AI6_Vars begin
		/plateindex -1 def
		/setcmykcolor where {
			pop
			gsave
			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
			grestore
			1 0 0 0 ci6foureq { 
				/plateindex 0 def
			}{
				0 1 0 0 ci6foureq { 
					/plateindex 1 def
				}{
					0 0 1 0 ci6foureq {
						/plateindex 2 def
					}{
						0 0 0 1 ci6foureq { 
							/plateindex 3 def
						}{
							0 0 0 0 ci6foureq {
								/plateindex 5 def
							} if
						} ifelse
					} ifelse
				} ifelse
			} ifelse
			pop pop pop pop
		} if
		plateindex
 end
} def
/ci6concatprocs {
	/packedarray where {
		pop dup type /packedarraytype eq 2 index type
		/packedarraytype eq or
	}{
		false
	} ifelse
	{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		_proc1 aload pop
		_proc2 aload pop
		_proc1 length
		_proc2 length add
		packedarray cvx
	}{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		/_newproc _proc1 length _proc2 length add array def
		_newproc 0 _proc1 putinterval
		_newproc _proc1 length _proc2 putinterval
		_newproc cvx
	} ifelse
} def
/ci6istint {
	type /arraytype eq 
} def
/ci6isspot {
	dup type /arraytype eq {
		dup length 1 sub get /Separation eq
	}{
		pop false
	} ifelse
} def
/ci6spotname {
	dup ci6isspot {dup length 2 sub get}{pop ()} ifelse
} def
/ci6altspace {
	aload pop pop pop ci6colormake
} def
/ci6numcomps {
	dup /DeviceGray eq {
		pop 1
	}{
		dup /DeviceRGB eq {
			pop 3
		}{
			/DeviceCMYK eq {
				4
			}{
				1
			} ifelse
		} ifelse
	} ifelse
} def
/ci6marksplate {
	dup /DeviceGray eq {
		pop plateindex 3 eq
	}{
		dup /DeviceRGB eq {
			pop plateindex 5 ne
		}{
			dup /DeviceCMYK eq {
				pop plateindex 5 ne
			}{
				dup ci6isspot {
					/findcmykcustomcolor where {
						pop
						dup length 2 sub get
						0.1 0.1 0.1 0.1 5 -1 roll
						findcmykcustomcolor 1 setcustomcolor
						systemdict /currentgray get exec
						1 ne
					}{
						pop plateindex 5 ne
					} ifelse
				}{
					pop plateindex 5 ne
				} ifelse
			} ifelse
		} ifelse
	} ifelse
} def
/ci6colormake {
	dup ci6numcomps
	exch 1 index 2 add 1 roll
	dup 1 eq {pop}{array astore} ifelse
	exch
} def
/ci6colorexpand {
	dup ci6spotname exch
	dup ci6istint {
		ci6altspace
		exch 4 1 roll
	}{
		1 3 1 roll
	} ifelse
} def
/ci6colortint {
	dup /DeviceGray eq {
		3 1 roll 1 exch sub mul 1 exch sub exch
	}{
		dup /DeviceRGB eq {
			3 1 roll {1 exch sub 1 index mul 1 exch sub exch} forall pop 3 array astore exch
		}{
			dup /DeviceCMYK eq {
				3 1 roll {1 index mul exch} forall pop 4 array astore exch
			}{
				3 1 roll mul exch
			} ifelse
		} ifelse
	} ifelse
} def
/ci6colortocmyk {
	dup /DeviceGray eq {
		pop 1 exch sub 0 0 0 4 -1 roll 4 array astore
	}{
		dup /DeviceRGB eq {
			pop aload pop _rgbtocmyk 4 array astore
		}{
			dup /DeviceCMYK eq {
				pop
			}{
				ci6altspace ci6colortint ci6colortocmyk
			} ifelse
		} ifelse
	} ifelse
} def
/ci6makeimagedict {
	7 dict begin
		/ImageType 1 def
		/Decode exch def
		/DataSource exch def
		/ImageMatrix exch def
		/BitsPerComponent exch def
		/Height exch def
		/Width exch def
	currentdict end
} def
/ci6stringinvert {
	0 1 2 index length 1 sub {
		dup 2 index exch get 255 exch sub 2 index 3 1 roll put
	} for
} def
/ci6stringknockout {
	0 1 2 index length 1 sub {
		255 2 index 3 1 roll put
	} for
} def
/ci6stringapply {
	0 1 4 index length 1 sub {
		dup
		4 index exch get
		3 index 3 1 roll
		3 index exec
	} for
	pop exch pop
} def
/ci6walkrgbstring {
	0 3 index
	dup length 1 sub 0 3 3 -1 roll {
		3 getinterval {} forall
		5 index exec
		3 index
	} for
	
	 5 {pop} repeat
} def
/ci6walkcmykstring
{
	0 3 index
	dup length 1 sub 0 4 3 -1 roll {
		4 getinterval {} forall
		
		6 index exec
		
		3 index
		
	} for
	
	5 { pop } repeat
	
} def
/ci6putrgbtograystr
{
	.11 mul exch
	
	.59 mul add exch
	
	.3 mul add
	
	cvi 3 copy put
	
	pop 1 add
} def
/ci6putcmyktograystr
{
	exch .11 mul add
	
	exch .59 mul add
	
	exch .3 mul add
	
	dup 255 gt { pop 255 } if
	
	255 exch sub cvi 3 copy put
	
	pop 1 add
} def
/ci6rgbtograyproc {	
	Adobe_ColorImage_AI6_Vars begin 
		sourcearray 0 get exec
		XIBuffer3
		dup 3 1 roll 
		
		/ci6putrgbtograystr load exch
		ci6walkrgbstring
 end
} def
/ci6cmyktograyproc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		XIBuffer3
		dup 3 1 roll 
		
		/ci6putcmyktograystr load exch
		ci6walkcmykstring
 end
} def
/ci6separatecmykproc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		
		XIBuffer3
		
		0 2 index
		
		plateindex 4 2 index length 1 sub {
			get 255 exch sub
			
			3 copy put pop 1 add
			
			2 index
		} for
		pop pop exch pop
 end
} def
	
/ci6compositeimage {
	dup 1 eq {
		pop pop image
	}{
		/ci6colorimage load null ne {
			ci6colorimage
		}{
			3 1 roll pop
			sourcearray 0 3 -1 roll put
			3 eq {/ci6rgbtograyproc}{/ci6cmyktograyproc} ifelse load
			image
		} ifelse
	} ifelse
} def
/ci6knockoutimage {
	gsave
	0 ci6curtransfer exec 1 ci6curtransfer exec
	eq {
		0 ci6curtransfer exec 0.5 lt
	}{
		0 ci6curtransfer exec 1 ci6curtransfer exec gt
	} ifelse
	{{pop 0}}{{pop 1}} ifelse
	systemdict /settransfer get exec
	ci6compositeimage
	grestore
} def
/ci6drawimage {
	ci6testplate -1 eq {
		pop ci6compositeimage
	}{
		dup type /arraytype eq {
			dup length plateindex gt {plateindex get}{pop false} ifelse
		}{
			{
				true
			}{
				dup 1 eq {plateindex 3 eq}{plateindex 3 le} ifelse
			} ifelse
		} ifelse
		{
			dup 1 eq {
				pop pop ci6image
			}{
				dup 3 eq {
					ci6compositeimage
				}{
					pop pop
					sourcearray 0 3 -1 roll put
					/ci6separatecmykproc load
					ci6image
				} ifelse
			} ifelse
		}{
			ci6curoverprint {
				7 {pop} repeat
			}{
				ci6knockoutimage
			} ifelse
		} ifelse
	} ifelse
} def
/ci6proctintimage {
	/_ptispace exch store /_ptiname exch store /_pti1 exch store /_pti0 exch store /_ptiproc exch store
	/_pticomps _ptispace ci6numcomps store
	/_ptiscale _pti1 _pti0 sub store
	level2? {
		_ptiname length 0 gt version cvr 2012 ge and {
			[/Separation _ptiname _ptispace {_ptiproc}] setcolorspace
			[_pti0 _pti1] ci6makeimagedict ci6image
		}{
			[/Indexed _ptispace 255 {255 div _ptiscale mul _pti0 add _ptiproc}] setcolorspace
			[0 255] ci6makeimagedict ci6image
		} ifelse
	}{
		_pticomps 1 eq {
			{
				dup
				{
					255 div _ptiscale mul _pti0 add _ptiproc 255 mul cvi put
				} ci6stringapply
			} ci6concatprocs ci6image
		}{
			{
				dup length _pticomps mul dup _ptibuf length ne {/_ptibuf exch string store}{pop} ifelse
				_ptibuf {
					exch _pticomps mul exch 255 div _ptiscale mul _pti0 add _ptiproc
					_pticomps 2 add -2 roll
					_pticomps 1 sub -1 0 {
						1 index add 2 index exch
						5 -1 roll
						255 mul cvi put
					} for
					pop pop
				} ci6stringapply
			} ci6concatprocs false _pticomps
			/ci6colorimage load null eq {7 {pop} repeat}{ci6colorimage} ifelse
		} ifelse
	} ifelse
} def
/ci6graytintimage {
	/_gtigray 5 -1 roll store
	{1 _gtigray sub mul 1 exch sub} 4 1 roll
	/DeviceGray ci6proctintimage
} def
/ci6cmyktintimage {
	/_cticmyk 5 -1 roll store
	{_cticmyk {1 index mul exch} forall pop} 4 1 roll
	/DeviceCMYK ci6proctintimage
} def
/ci6rgbtintimage {
	/_rtirgb 5 -1 roll store
	{_rtirgb {1 exch sub 1 index mul 1 exch sub exch} forall pop} 4 1 roll
	/DeviceRGB ci6proctintimage
} def
/ci6tintimage {
	ci6testplate -1 eq {
		ci6colorexpand
		3 -1 roll 5 -1 roll {0}{0 exch} ifelse 4 2 roll
		dup /DeviceGray eq {
			pop ci6graytintimage
		}{
			dup /DeviceRGB eq {
				pop ci6rgbtintimage
			}{
				pop ci6cmyktintimage
			} ifelse
		} ifelse
	}{
		dup ci6marksplate {
			plateindex 5 lt {
				ci6colortocmyk plateindex get
				dup 0 eq ci6curoverprint and {
					7 {pop} repeat
				}{
					1 exch sub
					exch {1 0}{0 1} ifelse () ci6graytintimage
				} ifelse
			}{
				pop exch {0}{0 exch} ifelse 0 3 1 roll () ci6graytintimage
			} ifelse
		}{
			ci6curoverprint {
				8 {pop} repeat
			}{
				pop pop pop
				{pop 1} 0 1 () /DeviceGray ci6proctintimage
			} ifelse
		} ifelse
	} ifelse
} def
/XINullImage {
} def
/XIImageMask {
	XIImageWidth XIImageHeight false
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	imagemask
} def
/XIImageTint {
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	XIType 3 eq XIColorValues XIColorSpace ci6tintimage
} def
/XIImage {
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	false XIChannelCount XIPlateList ci6drawimage
} def
/XG {
	pop pop
} def
/XF {
	13 {pop} repeat
} def
/Xh {
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		/XIImageMatrix exch def
		0 0 moveto
		XIImageMatrix concat
		XIImageWidth XIImageHeight scale
		
		/_lp /null ddef
		_fc
		/_lp /imagemask ddef
 end
} def
/XH {
	Adobe_ColorImage_AI6_Vars begin
		grestore
 end
} def
/XIEnable {
	Adobe_ColorImage_AI6_Vars /XIEnable 3 -1 roll put
} def
/XC {
	Adobe_ColorImage_AI6_Vars begin
		ci6colormake
		/XIColorSpace exch def
		/XIColorValues exch def
 end
} def
/XIPlates {
	Adobe_ColorImage_AI6_Vars begin
		/XIPlateList exch def
 end
} def
/XI
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		cvi dup
		256 idiv /XICompression exch store
		256 mod /XIEncoding exch store
		pop pop
		/XIChannelCount exch def
		/XIBitsPerPixel exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		pop pop pop pop
		/XIImageMatrix exch def
		XIBitsPerPixel 1 eq {
			XIImageWidth 8 div ceiling cvi
		}{
			XIImageWidth XIChannelCount mul
		} ifelse
		/XIRowBytes exch def
		XIEnable {
			/XIBuffer3 XIImageWidth string def
			XICompression 0 eq {
				/XIBuffer1 XIRowBytes string def
				XIEncoding 0 eq {
					{currentfile XIBuffer1 readhexstring pop}
				}{
					{currentfile XIBuffer1 readstring pop}
				} ifelse
			}{
				/XIBuffer1 256 string def
				/XIBuffer2 XIRowBytes string def
				{currentfile XIBuffer1 readline pop (%) anchorsearch {pop} if}
				/ASCII85Decode filter /DCTDecode filter
				/XIFile exch def
				{XIFile XIBuffer2 readstring pop}
			} ifelse
			/XIDataProc exch def
			
			XIType 1 ne {
				0 setgray
			} if
			XIType 1 eq {
				XIImageMask
			}{
				XIType 2 eq XIType 3 eq or {
					XIImageTint
				}{
					XIImage
				} ifelse
			} ifelse
		}{
			XINullImage
		} ifelse
		/XIPlateList false def
		grestore
 end
} def
end
%%EndProcSet
%%BeginResource: procset Adobe_Illustrator_AI5 1.3 0
%%Title: (Adobe Illustrator (R) Version 8.0 Full Prolog)
%%Version: 1.3 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1998 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5_vars 112 dict dup begin
put
/_?cmyk false def
/_eo false def
/_lp /none def
/_pf
{
} def
/_ps
{
} def
/_psf
{
} def
/_pss
{
} def
/_pjsf
{
} def
/_pjss
{
} def
/_pola 0 def
/_doClip 0 def
/cf currentflat def
/_lineorientation 0 def
/_charorientation 0 def
/_yokoorientation 0 def
/_tm matrix def
/_renderStart
[
/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0
] def
/_renderEnd
[
null null null null /i1 /i1 /i1 /i1
] def
/_render -1 def
/_shift [0 0] def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading
[
0 0
] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fontSize 0 def
/_fontAscent 0 def
/_fontDescent 0 def
/_fontHeight 0 def
/_fontRotateAdjust 0 def
/Ss 256 string def
Ss 0 (fonts/) putinterval
/_cnt 0 def
/_scale [1 1] def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_hfname 100 string def
/_hffound false def
/Tx
{
} def
/Tj
{
} def
/CRender
{
} def
/_AI3_savepage
{
} def
/_gf null def
/_cf 4 array def
/_rgbf 3 array def
/_if null def
/_of false def
/_fc
{
} def
/_gs null def
/_cs 4 array def
/_rgbs 3 array def
/_is null def
/_os false def
/_sc
{
} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
/_lobyte 0 def
/_hibyte 0 def
/_cproc null def
/_cscript 0 def
/_hvax 0 def
/_hvay 0 def
/_hvwb 0 def
/_hvcx 0 def
/_hvcy 0 def
/_bitfont null def
/_bitlobyte 0 def
/_bithibyte 0 def
/_bitkey null def
/_bitdata null def
/_bitindex 0 def
/discardSave null def
/buffer 256 string def
/beginString null def
/endString null def
/endStringLength null def
/layerCnt 1 def
/layerCount 1 def
/perCent (%) 0 get def
/perCentSeen? false def
/newBuff null def
/newBuffButFirst null def
/newBuffLast null def
/clipForward? false def
end
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 100 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/initialize
{
	Adobe_Illustrator_AI5 dup begin
	Adobe_Illustrator_AI5_vars begin
	/_aicmykps where {pop /_?cmyk _aicmykps def}if
	discardDict
	{
		bind pop pop
	} forall
	dup /nc get begin
	{
		dup xcheck 1 index type /operatortype ne and
		{
			bind
		} if
		pop pop
	} forall
 end
	newpath
} def
/terminate
{
 end
 end
} def
/_
null def
/ddef
{
	Adobe_Illustrator_AI5_vars 3 1 roll put
} def
/xput
{
	dup load dup length exch maxlength eq
	{
		dup dup load dup
		length 2 mul dict copy def
	} if
	load begin
	def
 end
} def
/npop
{
	{
		pop
	} repeat
} def
/hswj
{
	dup stringwidth 3 2 roll
	{
		_hvwb eq { exch _hvcx add exch _hvcy add } if
		exch _hvax add exch _hvay add
	} cforall
} def
/vswj
{
	0 0 3 -1 roll
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			dup cstring stringwidth 5 2 roll
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			4 -1 roll sub exch
			3 -1 roll sub exch
		}
		{
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			_fontHeight sub
		} ifelse
	} cforall
} def
/swj
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hswj } { vswj } ifelse
} def
/sw
{
	0 0 0 6 3 roll swj
} def
/vjss
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index setmatrix stroke
			grestore
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			gsave
			2 index false charpath
			6 index setmatrix stroke
			grestore
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjss
{
	4 1 roll
	{
		dup cstring
		gsave
		false charpath currentpoint
		5 index setmatrix stroke
		grestore
		moveto
		_sp eq
		{
			5 index 5 index rmoveto
		} if
		2 copy rmoveto
	} cforall
	6 npop
} def
/jss
{
	_lineorientation 0 eq { hjss } { vjss } ifelse
} def
/ss
{
	0 0 0 7 3 roll jss
} def
/vjsp
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			false charpath
            currentpoint
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			2 index false charpath
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjsp
{
    4 1 roll
    {
        dup cstring
        false charpath
        _sp eq
        {
            5 index 5 index rmoveto
        } if
        2 copy rmoveto
    } cforall
    6 npop
} def
/jsp
{
	matrix currentmatrix
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/sp
{
    matrix currentmatrix
    0 0 0 7 3 roll
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/pl
{
	transform
	0.25 sub round 0.25 add exch
	0.25 sub round 0.25 add exch
	itransform
} def
/setstrokeadjust where
{
	pop true setstrokeadjust
	/c
	{
		curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
		2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		lineto
	} def
	/L
	/l load def
	/m
	{
		moveto
	} def
}
{
	/c
	{
		pl curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
		pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		pl lineto
	} def
	/L
	/l load def
	/m
	{
		pl moveto
	} def
} ifelse
/d
{
	setdash
} def
/cf
{
} def
/i
{
	dup 0 eq
	{
		pop cf
	} if
	setflat
} def
/j
{
	setlinejoin
} def
/J
{
	setlinecap
} def
/M
{
	setmiterlimit
} def
/w
{
	setlinewidth
} def
/XR
{
	0 ne
	/_eo exch ddef
} def
/H
{
} def
/h
{
	closepath
} def
/N
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			_eo {eoclip} {clip} ifelse /_doClip 0 ddef
		} if
		newpath
	}
	{
		/CRender
		{
			N
		} ddef
	} ifelse
} def
/n
{
	N
} def
/F
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc
			/_doClip 0 ddef
		}
		{
			_pf
		} ifelse
	}
	{
		/CRender
		{
			F
		} ddef
	} ifelse
} def
/f
{
	closepath
	F
} def
/S
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			_ps
		} ifelse
	}
	{
		/CRender
		{
			S
		} ddef
	} ifelse
} def
/s
{
	closepath
	S
} def
/B
{
	_pola 0 eq
	{
		_doClip 1 eq
		gsave F grestore
		{
			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			S
		} ifelse
	}
	{
		/CRender
		{
			B
		} ddef
	} ifelse
} def
/b
{
	closepath
	B
} def
/W
{
	/_doClip 1 ddef
} def
/*
{
	count 0 ne
	{
		dup type /stringtype eq
		{
			pop
		} if
	} if
	newpath
} def
/u
{
} def
/U
{
} def
/q
{
	_pola 0 eq
	{
		gsave
	} if
} def
/Q
{
	_pola 0 eq
	{
		grestore
	} if
} def
/*u
{
	_pola 1 add /_pola exch ddef
} def
/*U
{
	_pola 1 sub /_pola exch ddef
	_pola 0 eq
	{
		CRender
	} if
} def
/D
{
	pop
} def
/*w
{
} def
/*W
{
} def
/`
{
	/_i save ddef
	clipForward?
	{
		nulldevice
	} if
	6 1 roll 4 npop
	concat pop
	userdict begin
	/showpage
	{
	} def
	0 setgray
	0 setlinecap
	1 setlinewidth
	0 setlinejoin
	10 setmiterlimit
	[] 0 setdash
	/setstrokeadjust where {pop false setstrokeadjust} if
	newpath
	0 setgray
	false setoverprint
} def
/~
{
 end
	_i restore
} def
/_rgbtocmyk
{
	3
	{
		1 exch sub 3 1 roll
	} repeat
	3 copy 1 4 1 roll
	3
	{
		3 index 2 copy gt
		{
			exch
		} if
		pop 4 1 roll
	} repeat
	pop pop pop
	4 1 roll
	3
	{
		3 index sub
		3 1 roll
	} repeat
	4 -1 roll
} def
/setrgbfill
{
	_rgbf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_rgbf aload pop setrgbcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/setrgbstroke
{
	_rgbs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_rgbs aload pop setrgbcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/O
{
	0 ne
	/_of exch ddef
	/_lp /none ddef
} def
/R
{
	0 ne
	/_os exch ddef
	/_lp /none ddef
} def
/g
{
	/_gf exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/G
{
	/_gs exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/k
{
	_cf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_cf aload pop setcmykcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/K
{
	_cs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_cs aload pop setcmykcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xa
{
	_?cmyk {
		3 npop k
	}{
		setrgbfill 4 npop
	} ifelse
} def
/XA
{
	_?cmyk {
		3 npop K
	}{
		setrgbstroke 4 npop
	} ifelse
} def
/Xs
{
	/_gf exch ddef
	5 npop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setAIseparationgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XS
{
	/_gs exch ddef
	5 npop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setAIseparationgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xx
{
	exch
	/_gf exch ddef
	0 eq {
		findcmykcustomcolor
	}{
		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse
		{
			4 1 roll 3 npop
			findcmykcustomcolor
		}{
			8 -4 roll 4 npop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XX
{
	exch
	/_gs exch ddef
	0 eq {
		findcmykcustomcolor
	}{
		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse
		{
			4 1 roll 3 npop
			findcmykcustomcolor
		}{
			8 -4 roll 4 npop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/x
{
	/_gf exch ddef
	findcmykcustomcolor
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/X
{
	/_gs exch ddef
	findcmykcustomcolor
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/XK
{
	3 -1 roll pop
	0 eq
	{
		1 exch sub
		3 {dup 3 1 roll mul 5 1 roll} repeat
		mul 4 1 roll
		K
	}
	{
		1 exch sub 4 1 roll
		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat
		4 -1 roll pop
		XA
	} ifelse
} def
/Xk
{
	3 -1 roll pop
	0 eq
	{
		1 exch sub
		3 {dup 3 1 roll mul 5 1 roll} repeat
		mul 4 1 roll
		k
	}
	{
		1 exch sub 4 1 roll
		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat
		4 -1 roll pop
		Xa
	} ifelse
} def
/A
{
	pop
} def
/annotatepage
{
userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse
} def
/XT {
	pop pop
} def
/Xt {
	pop
} def
/discard
{
	save /discardSave exch store
	discardDict begin
	/endString exch store
	gt38?
	{
		2 add
	} if
	load
	stopped
	pop
 end
	discardSave restore
} bind def
userdict /discardDict 7 dict dup begin
put
/pre38Initialize
{
	/endStringLength endString length store
	/newBuff buffer 0 endStringLength getinterval store
	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store
	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store
} def
/shiftBuffer
{
	newBuff 0 newBuffButFirst putinterval
	newBuffLast 0
	currentfile read not
	{
	stop
	} if
	put
} def
0
{
	pre38Initialize
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff endString eq
			{
				cleartomark stop
			} if
			shiftBuffer
		} loop
	}
	{
	stop
	} ifelse
} def
1
{
	pre38Initialize
	/beginString exch store
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff beginString eq
			{
				/layerCount dup load 1 add store
			}
			{
				newBuff endString eq
				{
					/layerCount dup load 1 sub store
					layerCount 0 eq
					{
						cleartomark stop
					} if
				} if
			} ifelse
			shiftBuffer
		} loop
	} if
} def
2
{
	mark
	{
		currentfile buffer {readline} stopped {
			% assume error was due to overfilling the buffer
		}{
			not
			{
				stop
			} if
			endString eq {
				cleartomark stop
			} if
		}ifelse
	} loop
} def
3
{
	/beginString exch store
	/layerCnt 1 store
	mark
	{
		currentfile buffer {readline} stopped {
			% assume error was due to overfilling the buffer
		}{
			not
			{
				stop
			} if
			dup beginString eq
			{
				pop /layerCnt dup load 1 add store
			}
			{
				endString eq
				{
					layerCnt 1 eq
					{
						cleartomark stop
					}
					{
						/layerCnt dup load 1 sub store
					} ifelse
				} if
			} ifelse
		}ifelse
	} loop
} def
end
userdict /clipRenderOff 15 dict dup begin
put
{
	/n /N /s /S /f /F /b /B
}
{
	{
		_doClip 1 eq
		{
			/_doClip 0 ddef _eo {eoclip} {clip} ifelse
		} if
		newpath
	} def
} forall
/Tr /pop load def
/Bb {} def
/BB /pop load def
/Bg {12 npop} def
/Bm {6 npop} def
/Bc /Bm load def
/Bh {4 npop} def
end
/Lb
{
	6 npop
	7 2 roll
	5 npop
	0 eq
	{
		0 eq
		{
			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard
		}
		{
			
			/clipForward? true def
			
			/Tx /pop load def
			/Tj /pop load def
			
			currentdict end clipRenderOff begin begin
		} ifelse
	}
	{
		0 eq
		{
			save /discardSave exch store
		} if
	} ifelse
} bind def
/LB
{
	discardSave dup null ne
	{
		restore
	}
	{
		pop
		clipForward?
		{
			currentdict
		 end
		 end
		 begin
					
			/clipForward? false ddef
		} if
	} ifelse
} bind def
/Pb
{
	pop pop
	0 (%AI5_EndPalette) discard
} bind def
/Np
{
	0 (%AI5_End_NonPrinting--) discard
} bind def
/Ln /pop load def
/Ap
/pop load def
/Ar
{
	72 exch div
	0 dtransform dup mul exch dup mul add sqrt
	dup 1 lt
	{
		pop 1
	} if
	setflat
} def
/Mb
{
	q
} def
/Md
{
} def
/MB
{
	Q
} def
/nc 4 dict def
nc begin
/setgray
{
	pop
} bind def
/setcmykcolor
{
	4 npop
} bind def
/setrgbcolor
{
	3 npop
} bind def
/setcustomcolor
{
	2 npop
} bind def
currentdict readonly pop
end
/XP
{
	4 npop
} bind def
/XD
{
	pop
} bind def
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 2.0 8
%%Title: (Writing System Operators)
%%Version: 2.0 8
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1992-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 14 dict dup begin put
/initialize
{
	Adobe_cshow begin
	Adobe_cshow
	{
		dup xcheck
		{
			bind
		} if
		pop pop
	} forall
 end
	Adobe_cshow begin
} def
/terminate
{
currentdict Adobe_cshow eq
	{
 end
	} if
} def
/cforall
{
	/_lobyte 0 ddef
	/_hibyte 0 ddef
	/_cproc exch ddef
	/_cscript currentfont /FontScript known { currentfont /FontScript get } { -1 } ifelse ddef
	{
		/_lobyte exch ddef
		_hibyte 0 eq
		_cscript 1 eq
		_lobyte 129 ge _lobyte 159 le and
		_lobyte 224 ge _lobyte 252 le and or and
		_cscript 2 eq
		_lobyte 161 ge _lobyte 254 le and and
		_cscript 3 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript 25 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript -1 eq
		or or or or and
		{
			/_hibyte _lobyte ddef
		}
		{
			_hibyte 256 mul _lobyte add
			_cproc
			/_hibyte 0 ddef
		} ifelse
	} forall
} def
/cstring
{
	dup 256 lt
	{
		(s) dup 0 4 3 roll put
	}
	{
		dup 256 idiv exch 256 mod
		(hl) dup dup 0 6 5 roll put 1 4 3 roll put
	} ifelse
} def
/clength
{
	0 exch
	{ 256 lt { 1 } { 2 } ifelse add } cforall
} def
/hawidthshow
{
	{
		dup cstring
		show
		_hvax _hvay rmoveto
		_hvwb eq { _hvcx _hvcy rmoveto } if
	} cforall
} def
/vawidthshow
{
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			-90 rotate
			0 _fontRotateAdjust rmoveto
			cstring
			_hvcx _hvcy _hvwb _hvax _hvay 6 -1 roll awidthshow
			0 _fontRotateAdjust neg rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			exch _hvay sub exch _hvax sub
			2 index _hvwb eq { exch _hvcy sub exch _hvcx sub } if
			3 2 roll
			cstring
			dup stringwidth pop 2 div neg _fontAscent neg rmoveto
			show
			moveto
		} ifelse
	} cforall
} def
/hvawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hawidthshow } { vawidthshow } ifelse
} def
/hvwidthshow
{
	0 0 3 -1 roll hvawidthshow
} def
/hvashow
{
	0 0 0 6 -3 roll hvawidthshow
} def
/hvshow
{
	0 0 0 0 0 6 -1 roll hvawidthshow
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_shading_AI8 1.0 0
%%Title: (Adobe Illustrator 8 Shading Procset)
%%Version: 1.0 0
%%CreationDate: (12/17/97) ()
%%Copyright: ((C) 1987-1997 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /Adobe_shading_AI8 10 dict dup begin put
/initialize {
	Adobe_shading_AI8 begin
	Adobe_shading_AI8 bdprocs
	Mesh /initialize get exec
} def
/terminate {
	currentdict Adobe_shading_AI8 eq {
	 end
	} if
} def
/bdprocs {
	{
		dup xcheck 1 index type /arraytype eq and {
			bind
		} if
		pop pop
	} forall
} def
/X! {pop} def
/X# {pop pop} def
/Mesh 40 dict def
Mesh begin
/initialize {
	Mesh bdprocs
	Mesh begin
		/emulate? /AI8MeshEmulation where {
			pop AI8MeshEmulation
		}{
			systemdict /shfill known not
		} ifelse def
 end
} def
/bd {
	shadingdict begin
} def
/paint {
	emulate? {
	 end
	}{
		/_lp /none ddef _fc /_lp /none ddef
		
		/AIColorSpace AIColorSpace tocolorspace store
		/ColorSpace AIColorSpace topsspace store
		
		version_ge_3010.106 not systemdict /setsmoothness known and {
			0.0001 setsmoothness
		} if
		
		composite? {
			/DataSource getdatasrc def
			Matrix concat
			currentdict end
			shfill
		}{
			AIColorSpace makesmarks AIPlateList markingplate and not isoverprint and {
			 end
			}{
				/ColorSpace /DeviceGray store
				/Decode [0 1 0 1 0 1] store
				/DataSource getplatesrc def
				Matrix concat
				currentdict end
				shfill
			} ifelse
		} ifelse
	} ifelse
} def
/shadingdict 12 dict def
shadingdict begin
	/ShadingType 6 def
	/BitsPerCoordinate 16 def
	/BitsPerComponent 8 def
	/BitsPerFlag 8 def
end
/datafile null def
/databuf 256 string def
/dataptr 0 def
/srcspace null def
/srcchannels 0 def
/dstchannels 0 def
/dstplate 0 def
/srctodstcolor null def
/getplatesrc {
	/srcspace AIColorSpace store
	/srcchannels AIColorSpace getnchannels store
	/dstchannels 1 store
	/dstplate getplateindex store
	/srctodstcolor srcspace makesmarks {
		dstplate 4 eq {
			{1 exch sub}
		}{
			{srcspace tocmyk 3 dstplate sub index 1 exch sub 5 1 roll 4 {pop} repeat}
		} ifelse
	}{
		{srcchannels {pop} repeat 1}
	} ifelse store
	/datafile getdatasrc store
	/rdpatch168 load DataLength () /SubFileDecode filter
} def
/getdatasrc {
	/rdcmntline load /ASCII85Decode filter
} def
/rdpatch168 {
	/dataptr 0 store
	49 rdcount
	4 {
		dup {pop srcchannels getint8} if
		dup {pop srctodstcolor dstchannels putint8 true} if
	} repeat
	{databuf 0 dataptr getinterval}{()} ifelse
} def
/rdpatch3216 {
	/dataptr 0 store
	97 rdcount
	4 {
		dup {pop srcchannels getint16} if
		dup {pop srctodstcolor dstchannels putint16 true} if
	} repeat
	{databuf 0 dataptr getinterval}{()} ifelse
} def
/rdcount {
	dup 0 gt {
		datafile databuf dataptr 4 -1 roll getinterval readstring
		exch length dataptr add /dataptr exch store
	}{
		true
	} ifelse
} def
/getint8 {
	mark true 3 -1 roll
	{
		dup {pop datafile read} if
		dup {pop 255 div true} if
	} repeat
	{
		counttomark 1 add -1 roll pop true
	}{
		cleartomark false
	} ifelse
} def
/putint8 {
	dup dataptr add /dataptr exch store
	dataptr exch
	{
		1 sub exch
		255 mul cvi
		databuf 2 index
		3 -1 roll put
	} repeat
	pop
} def 
/getint16 {
	mark true 3 -1 roll
	{
		dup {pop datafile read} if
		dup {pop 256 mul datafile read} if
		dup {pop add 65535 div true} if
	} repeat
	{
		counttomark 1 add -1 roll pop true
	}{
		cleartomark false
	} ifelse
} def
/putint16 {
	dup 2 mul dataptr add /dataptr exch store
	dataptr exch
	{
		2 sub exch
		65535 mul cvi dup
		256 idiv databuf 3 index 3 -1 roll put
		256 mod databuf 2 index 1 add 3 -1 roll put
	} repeat
	pop
} def 
/srcbuf 256 string def
/rdcmntline {
	currentfile srcbuf readline pop
	(%) anchorsearch {pop} if
} def
/getplateindex {
	0 [cyan? magenta? yellow? black? customColor?] {{exit} if 1 add} forall
} def
/aicsarray 4 array def
/aicsaltvals 4 array def
/aicsaltcolr aicsaltvals def
/tocolorspace {
	dup type /arraytype eq {
		mark exch aload pop
		aicsarray 0 3 -1 roll put
		aicsarray 1 3 -1 roll put
		dup aicsarray 2 3 -1 roll put
		gettintxform aicsarray 3 3 -1 roll put
		counttomark aicsaltvals 0 3 -1 roll getinterval /aicsaltcolr exch store
		aicsaltcolr astore pop pop
		aicsarray
	} if
} def
/subtintxform {aicsaltcolr {1 index mul exch} forall pop} def
/addtintxform {aicsaltcolr {1 sub 1 index mul 1 add exch} forall pop} def
/gettintxform {
	/DeviceRGB eq {/addtintxform}{/subtintxform} ifelse load
} def
/getnchannels {
	dup type /arraytype eq {0 get} if
	colorspacedict exch get begin Channels end
} def
/makesmarks {
	composite? {
		pop true
	}{
		dup dup type /arraytype eq {0 get} if
		colorspacedict exch get begin MarksPlate end
	} ifelse
} def
/markingplate {
	composite? {
		pop true
	}{
		dup type /arraytype eq {
			dup length getplateindex gt {getplateindex get}{pop false} ifelse
		} if
	} ifelse
} def
/tocmyk {
	dup dup type /arraytype eq {0 get} if
	colorspacedict exch get begin ToCMYK end
} def
/topsspace {
	dup dup type /arraytype eq {0 get} if
	colorspacedict exch get begin ToPSSpace end
} def
/colorspacedict 5 dict dup begin
	/DeviceGray 4 dict dup begin
		/Channels 1 def
		/MarksPlate {pop black?} def
		/ToCMYK {pop 1 exch sub 0 0 0 4 -1 roll} def
		/ToPSSpace {} def
 end def
	/DeviceRGB 4 dict dup begin
		/Channels 3 def
		/MarksPlate {pop isCMYKSep?} def
		/ToCMYK {pop _rgbtocmyk} def
		/ToPSSpace {} def
 end def
	/DeviceCMYK 4 dict dup begin
		/Channels 4 def
		/MarksPlate {pop isCMYKSep?} def
		/ToCMYK {pop} def
		/ToPSSpace {} def
 end def
	/Separation 4 dict dup begin
		/Channels 1 def
		/MarksPlate {
			/findcmykcustomcolor where {
				pop dup 1 exch ToCMYK 5 -1 roll 1 get
				findcmykcustomcolor 1 setcustomcolor
				systemdict /currentgray get exec
				1 ne
			}{
				pop false
			} ifelse
		} def
		/ToCMYK {
			dup 2 get mark exch 4 2 roll
			3 get exec
			counttomark -1 roll tocmyk
			5 -1 roll pop
		} def
		/ToPSSpace {} def
 end def
	/Process 4 dict dup begin
		/Channels 1 def
		/MarksPlate {
			isCMYKSep? {
				1 exch ToCMYK 4 array astore getplateindex get 0 ne 
			}{
				pop false
			} ifelse
		} def
		/ToCMYK {
			dup 2 get mark exch 4 2 roll
			3 get exec
			counttomark -1 roll tocmyk
			5 -1 roll pop
		} def
		/ToPSSpace {
			4 array copy dup 0 /Separation put
		} def
 end def
end def
/isoverprint {
	/currentoverprint where {pop currentoverprint}{_of} ifelse
} def
/version_ge_3010.106 {
   version {cvr} stopped {
      pop
      false
   }{
      3010.106 ge
   } ifelse
} def
end
end
defaultpacking setpacking
%%EndResource
%%EndProlog
%%BeginSetup
userdict /_useSmoothShade true put
userdict /_aicmykps false put
userdict /_forceToCMYK false put
Adobe_level2_AI5 /initialize get exec
Adobe_cshow /initialize get exec
Adobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 AGM_Gradient /initializeAI get exec
Adobe_ColorImage_AI6 /initialize get exec
Adobe_shading_AI8 /initialize get exec
Adobe_Illustrator_AI5 /initialize get exec
%AI5_Begin_NonPrinting
Np
%AI8_PluginGroupInfo
(Adobe Path Blends) (Module externe D\351grad\351 de formes Adobe) (D\351grad\351s.aip)
%AI8_PluginGroupInfo
(Adobe Symbolism) (Symbolisme Adobe) (Symbolisme.aip)
%AI8_PluginGroupInfo
(Adobe Tracing Object) (Vectorisation) (Vectorisation.aip)
%AI8_PluginGroupInfo
(Adobe PatternOnPath Brush Tool) (Module externe Adobe Forme de motif) (Forme artistique.aip)
%AI8_PluginGroupInfo
(Adobe PatternOnPath Brush Tool) (Module externe Adobe Forme de motif) (Forme artistique.aip)
%AI8_PluginGroupInfo
(Adobe ArtOnPath Brush Tool) (Module externe Forme artistique Adobe) (Forme artistique.aip)
%AI8_PluginGroupInfo
(Adobe ArtOnPath Brush Tool) (Module externe Forme artistique Adobe) (Forme artistique.aip)
%AI8_PluginGroupInfo
(Adobe Calligraphic Brush Tool) (Module externe Forme calligraphique Adobe) (Forme calligraphique.aip)
%AI8_PluginGroupInfo
(Adobe Scatter Brush Tool) (Module externe Adobe Forme diffuse) (Forme diffuse.aip)
%AI8_PluginGroupInfo
(Adobe Scatter Brush Tool) (Module externe Adobe Forme diffuse) (Forme diffuse.aip)
%AI8_PluginGroupInfo
(Adobe Flare Plugin) (Flare) (Halo.aip)
%AI8_PluginGroupInfo
(Pathfinder Suite) (Forme compos\351e Adobe) (Extension Pathfinder.aip)
%AI8_PluginGroupInfo
(Adobe Deform Plugin) (Module externe Adobe Enveloppe) (Enveloppe et d\351formation.aip)
%AI8_PluginGroupInfo
(Adobe Planar Group) (Module externe Peinture dynamique d'Adobe) (PlanetXPlugin.aip)
%AI5_End_NonPrinting--
11 Bn
%AI5_BeginGradient: (Unnamed gradient 1)
(Unnamed gradient 1) 0 4 Bd
[
0.827451
0.556863
0.329412
0.121569
1 %_Br
<
BABBBBBCBCBDBDBEBEBFBFC0C0C1C1C2C2C3C3C4C4C5C6C6C7C7C8C8C9C9CACACBCBCCCCCDCDCECE
CFCFD0D0D1D1D2D2D3
>
<
5D5E5F606162636465666768696A6B6C6D6E6F7072737475767778797A7B7C7D7E7F808182838485
868788898A8B8C8D8E
>
<
25262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F40414142434445464748494A4B
4C4D4E4F5051525354
>
<
0001010203030405050606070808090A0A0B0C0C0D0E0E0F10101112121313141515161717181919
1A1B1B1C1C1D1E1E1F
>
1 %_Br
0.729412
0.364706
0.145098
0
1 %_Br
[
0.827451 0.556863 0.329412 0.121569 1 50 100 %_BS
%_0.827451 0.556863 0.329412 0.121569 1 50 100 Bs
0.827451 0.556863 0.329412 0.121569 1 50 82.4176 %_BS
%_0.827451 0.556863 0.329412 0.121569 1 50 82.4176 Bs
0.729412 0.364706 0.145098 0 1 49.8041 19.7802 %_BS
%_0.729412 0.364706 0.145098 0 1 49.8041 19.7802 Bs
0.729412 0.364706 0.145098 0 1 50 0 %_BS
%_0.729412 0.364706 0.145098 0 1 50 0 Bs
BD
%AI5_EndGradient
%AI5_BeginGradient: (Unnamed gradient 10)
(Unnamed gradient 10) 0 4 Bd
[
0.827451
0.556863
0.329412
0.121569
1 %_Br
<
BABBBBBCBCBDBDBEBEBFBFC0C0C1C1C2C2C3C3C4C4C5C6C6C7C7C8C8C9C9CACACBCBCCCCCDCDCECE
CFCFD0D0D1D1D2D2D3
>
<
5D5E5F606162636465666768696A6B6C6D6E6F7072737475767778797A7B7C7D7E7F808182838485
868788898A8B8C8D8E
>
<
25262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F40414142434445464748494A4B
4C4D4E4F5051525354
>
<
0001010203030405050606070808090A0A0B0C0C0D0E0E0F10101112121313141515161717181919
1A1B1B1C1C1D1E1E1F
>
1 %_Br
0.729412
0.364706
0.145098
0
1 %_Br
[
0.827451 0.556863 0.329412 0.121569 1 50 100 %_BS
%_0.827451 0.556863 0.329412 0.121569 1 50 100 Bs
0.827451 0.556863 0.329412 0.121569 1 50 82.4176 %_BS
%_0.827451 0.556863 0.329412 0.121569 1 50 82.4176 Bs
0.729412 0.364706 0.145098 0 1 49.8041 19.7802 %_BS
%_0.729412 0.364706 0.145098 0 1 49.8041 19.7802 Bs
0.729412 0.364706 0.145098 0 1 50 0 %_BS
%_0.729412 0.364706 0.145098 0 1 50 0 Bs
BD
%AI5_EndGradient
%AI5_BeginGradient: (Unnamed gradient 11)
(Unnamed gradient 11) 0 4 Bd
[
0.14902
0.607843
1
0.019608
1 %_Br
<
000102030405060708090A0B0C0D0E0F1011121314151618191A1B1C1D1E1F20212223242526
>
<
868787888889898A8A8B8C8C8D8D8E8E8F9090919192929394949595969697989899999A9A9B
>
<
F2F2F3F3F3F4F4F4F5F5F5F6F6F7F7F7F8F8F8F9F9F9FAFAFAFBFBFBFCFCFDFDFDFEFEFEFFFF
>
<
0000000001010101010101010202020202020203030303030303040404040404040405050505
>
1 %_Br
0
0.52549
0.94902
0
1 %_Br
[
0.14902 0.607843 1 0.019608 1 50 100 %_BS
%_0.14902 0.607843 1 0.019608 1 50 100 Bs
0.14902 0.607843 1 0.019608 1 50 82.4176 %_BS
%_0.14902 0.607843 1 0.019608 1 50 82.4176 Bs
0 0.52549 0.94902 0 1 50.3124 29.6703 %_BS
%_0 0.52549 0.94902 0 1 50.3124 29.6703 Bs
0 0.52549 0.94902 0 1 50 0 %_BS
%_0 0.52549 0.94902 0 1 50 0 Bs
BD
%AI5_EndGradient
%AI5_BeginGradient: (Unnamed gradient 2)
(Unnamed gradient 2) 0 4 Bd
[
0.541176
0.4
0.286275
0.007843
1 %_Br
<
60616263646566666768696A6B6C6D6E6F70717273737475767778797A7B7C7D7E7F808182828384
85868788898A
>
<
3D3E3F40414142434445464748494A4B4B4C4D4E4F50515253545556565758595A5B5C5D5E5F6060
616263646566
>
<
1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F40414243
444546474849
>
<
00000000000000000000000001010101010101010101010101010101010101010101020202020202
020202020202
>
1 %_Br
0.376471
0.239216
0.109804
0
1 %_Br
[
0.541176 0.4 0.286275 0.007843 1 50 100 %_BS
%_0.541176 0.4 0.286275 0.007843 1 50 100 Bs
0.541176 0.4 0.286275 0.007843 1 50 73.6264 %_BS
%_0.541176 0.4 0.286275 0.007843 1 50 73.6264 Bs
0.376471 0.239216 0.109804 0 1 50.2353 25.2747 %_BS
%_0.376471 0.239216 0.109804 0 1 50.2353 25.2747 Bs
0.376471 0.239216 0.109804 0 1 50 0 %_BS
%_0.376471 0.239216 0.109804 0 1 50 0 Bs
BD
%AI5_EndGradient
%AI5_BeginGradient: (Unnamed gradient 3)
(Unnamed gradient 3) 0 4 Bd
[
0.827451
0.556863
0.329412
0.121569
1 %_Br
<
BABBBBBCBCBDBDBEBEBFBFC0C0C1C1C2C2C3C3C4C4C5C6C6C7C7C8C8C9C9CACACBCBCCCCCDCDCECE
CFCFD0D0D1D1D2D2D3
>
<
5D5E5F606162636465666768696A6B6C6D6E6F7072737475767778797A7B7C7D7E7F808182838485
868788898A8B8C8D8E
>
<
25262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F40414142434445464748494A4B
4C4D4E4F5051525354
>
<
0001010203030405050606070808090A0A0B0C0C0D0E0E0F10101112121313141515161717181919
1A1B1B1C1C1D1E1E1F
>
1 %_Br
0.729412
0.364706
0.145098
0
1 %_Br
[
0.827451 0.556863 0.329412 0.121569 1 50 100 %_BS
%_0.827451 0.556863 0.329412 0.121569 1 50 100 Bs
0.827451 0.556863 0.329412 0.121569 1 50 82.4176 %_BS
%_0.827451 0.556863 0.329412 0.121569 1 50 82.4176 Bs
0.729412 0.364706 0.145098 0 1 49.8041 19.7802 %_BS
%_0.729412 0.364706 0.145098 0 1 49.8041 19.7802 Bs
0.729412 0.364706 0.145098 0 1 50 0 %_BS
%_0.729412 0.364706 0.145098 0 1 50 0 Bs
BD
%AI5_EndGradient
%AI5_BeginGradient: (Unnamed gradient 4)
(Unnamed gradient 4) 0 4 Bd
[
0.541176
0.4
0.286275
0.007843
1 %_Br
<
60616263646566666768696A6B6C6D6E6F70717273737475767778797A7B7C7D7E7F808182828384
85868788898A
>
<
3D3E3F40414142434445464748494A4B4B4C4D4E4F50515253545556565758595A5B5C5D5E5F6060
616263646566
>
<
1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F40414243
444546474849
>
<
00000000000000000000000001010101010101010101010101010101010101010101020202020202
020202020202
>
1 %_Br
0.376471
0.239216
0.109804
0
1 %_Br
[
0.541176 0.4 0.286275 0.007843 1 50 100 %_BS
%_0.541176 0.4 0.286275 0.007843 1 50 100 Bs
0.541176 0.4 0.286275 0.007843 1 50 73.6264 %_BS
%_0.541176 0.4 0.286275 0.007843 1 50 73.6264 Bs
0.376471 0.239216 0.109804 0 1 50.2353 25.2747 %_BS
%_0.376471 0.239216 0.109804 0 1 50.2353 25.2747 Bs
0.376471 0.239216 0.109804 0 1 50 0 %_BS
%_0.376471 0.239216 0.109804 0 1 50 0 Bs
BD
%AI5_EndGradient
%AI5_BeginGradient: (Unnamed gradient 5)
(Unnamed gradient 5) 0 4 Bd
[
0.541176
0.4
0.286275
0.007843
1 %_Br
<
60616263646566666768696A6B6C6D6E6F70717273737475767778797A7B7C7D7E7F808182828384
85868788898A
>
<
3D3E3F40414142434445464748494A4B4B4C4D4E4F50515253545556565758595A5B5C5D5E5F6060
616263646566
>
<
1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F40414243
444546474849
>
<
00000000000000000000000001010101010101010101010101010101010101010101020202020202
020202020202
>
1 %_Br
0.376471
0.239216
0.109804
0
1 %_Br
[
0.541176 0.4 0.286275 0.007843 1 50 100 %_BS
%_0.541176 0.4 0.286275 0.007843 1 50 100 Bs
0.541176 0.4 0.286275 0.007843 1 50 73.6264 %_BS
%_0.541176 0.4 0.286275 0.007843 1 50 73.6264 Bs
0.376471 0.239216 0.109804 0 1 50.2353 25.2747 %_BS
%_0.376471 0.239216 0.109804 0 1 50.2353 25.2747 Bs
0.376471 0.239216 0.109804 0 1 50 0 %_BS
%_0.376471 0.239216 0.109804 0 1 50 0 Bs
BD
%AI5_EndGradient
%AI5_BeginGradient: (Unnamed gradient 6)
(Unnamed gradient 6) 0 4 Bd
[
0.541176
0.4
0.286275
0.007843
1 %_Br
<
60616263646566666768696A6B6C6D6E6F70717273737475767778797A7B7C7D7E7F808182828384
85868788898A
>
<
3D3E3F40414142434445464748494A4B4B4C4D4E4F50515253545556565758595A5B5C5D5E5F6060
616263646566
>
<
1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F40414243
444546474849
>
<
00000000000000000000000001010101010101010101010101010101010101010101020202020202
020202020202
>
1 %_Br
0.376471
0.239216
0.109804
0
1 %_Br
[
0.541176 0.4 0.286275 0.007843 1 50 100 %_BS
%_0.541176 0.4 0.286275 0.007843 1 50 100 Bs
0.541176 0.4 0.286275 0.007843 1 50 73.6264 %_BS
%_0.541176 0.4 0.286275 0.007843 1 50 73.6264 Bs
0.376471 0.239216 0.109804 0 1 50.2353 25.2747 %_BS
%_0.376471 0.239216 0.109804 0 1 50.2353 25.2747 Bs
0.376471 0.239216 0.109804 0 1 50 0 %_BS
%_0.376471 0.239216 0.109804 0 1 50 0 Bs
BD
%AI5_EndGradient
%AI5_BeginGradient: (Unnamed gradient 7)
(Unnamed gradient 7) 0 4 Bd
[
0.541176
0.4
0.286275
0.007843
1 %_Br
<
60616263646566666768696A6B6C6D6E6F70717273737475767778797A7B7C7D7E7F808182828384
85868788898A
>
<
3D3E3F40414142434445464748494A4B4B4C4D4E4F50515253545556565758595A5B5C5D5E5F6060
616263646566
>
<
1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F40414243
444546474849
>
<
00000000000000000000000001010101010101010101010101010101010101010101020202020202
020202020202
>
1 %_Br
0.376471
0.239216
0.109804
0
1 %_Br
[
0.541176 0.4 0.286275 0.007843 1 50 100 %_BS
%_0.541176 0.4 0.286275 0.007843 1 50 100 Bs
0.541176 0.4 0.286275 0.007843 1 50 73.6264 %_BS
%_0.541176 0.4 0.286275 0.007843 1 50 73.6264 Bs
0.376471 0.239216 0.109804 0 1 50.2353 25.2747 %_BS
%_0.376471 0.239216 0.109804 0 1 50.2353 25.2747 Bs
0.376471 0.239216 0.109804 0 1 50 0 %_BS
%_0.376471 0.239216 0.109804 0 1 50 0 Bs
BD
%AI5_EndGradient
%AI5_BeginGradient: (Unnamed gradient 8)
(Unnamed gradient 8) 0 4 Bd
[
0.541176
0.4
0.286275
0.007843
1 %_Br
<
60616263646566666768696A6B6C6D6E6F70717273737475767778797A7B7C7D7E7F808182828384
85868788898A
>
<
3D3E3F40414142434445464748494A4B4B4C4D4E4F50515253545556565758595A5B5C5D5E5F6060
616263646566
>
<
1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F40414243
444546474849
>
<
00000000000000000000000001010101010101010101010101010101010101010101020202020202
020202020202
>
1 %_Br
0.376471
0.239216
0.109804
0
1 %_Br
[
0.541176 0.4 0.286275 0.007843 1 50 100 %_BS
%_0.541176 0.4 0.286275 0.007843 1 50 100 Bs
0.541176 0.4 0.286275 0.007843 1 50 73.6264 %_BS
%_0.541176 0.4 0.286275 0.007843 1 50 73.6264 Bs
0.376471 0.239216 0.109804 0 1 50.2353 25.2747 %_BS
%_0.376471 0.239216 0.109804 0 1 50.2353 25.2747 Bs
0.376471 0.239216 0.109804 0 1 50 0 %_BS
%_0.376471 0.239216 0.109804 0 1 50 0 Bs
BD
%AI5_EndGradient
%AI5_BeginGradient: (Unnamed gradient 9)
(Unnamed gradient 9) 0 4 Bd
[
0.541176
0.4
0.286275
0.007843
1 %_Br
<
60616263646566666768696A6B6C6D6E6F70717273737475767778797A7B7C7D7E7F808182828384
85868788898A
>
<
3D3E3F40414142434445464748494A4B4B4C4D4E4F50515253545556565758595A5B5C5D5E5F6060
616263646566
>
<
1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F40414243
444546474849
>
<
00000000000000000000000001010101010101010101010101010101010101010101020202020202
020202020202
>
1 %_Br
0.376471
0.239216
0.109804
0
1 %_Br
[
0.541176 0.4 0.286275 0.007843 1 50 100 %_BS
%_0.541176 0.4 0.286275 0.007843 1 50 100 Bs
0.541176 0.4 0.286275 0.007843 1 50 73.6264 %_BS
%_0.541176 0.4 0.286275 0.007843 1 50 73.6264 Bs
0.376471 0.239216 0.109804 0 1 50.2353 25.2747 %_BS
%_0.376471 0.239216 0.109804 0 1 50.2353 25.2747 Bs
0.376471 0.239216 0.109804 0 1 50 0 %_BS
%_0.376471 0.239216 0.109804 0 1 50 0 Bs
BD
%AI5_EndGradient
%AI5_Begin_NonPrinting
Np
%AI5_End_NonPrinting--
%AI5_BeginPalette
0 0 Pb
1 1 1 1 ([Rep\751rage] 1) 0 Xs
([Rep\751rage] 1)
Pc
PB
%AI5_EndPalette
%%EndSetup
%AI5_BeginLayer
1 1 1 1 0 0 1 0 79 128 255 0 50 Lb
(Calque 1) Ln
0 A
u
0 O
0 J 0 j 1 w 4 M []0 d0 XR
150.3525 407.501 m
150.3525 446.3809 L
158.2275 446.3809 L
158.2275 444.5068 l
158.2275 443.3057 158.0107 442.1289 157.5771 440.9756 C
157.1436 439.751 l
157.96 441.5693 159.2314 443.1006 160.96 444.3447 c
162.0166 445.1582 163.3369 445.8047 164.9209 446.2832 c
166.5049 446.7617 168.1133 447.001 169.7461 447.001 c
170.2734 447.001 170.7295 447.001 171.1143 447.001 c
171.498 447.001 172.1221 446.9043 172.9863 446.7129 c
177.1152 445.9453 180.3438 443.9668 182.6719 440.7773 c
185 437.5879 186.165 433.4268 186.165 428.2939 C
186.165 407.501 L
178.4775 407.501 L
178.4775 427.2256 L
178.4775 429.5293 l
178.4775 432.5527 177.501 435.0117 175.5479 436.9072 c
173.5947 438.8027 171.2451 439.751 168.4971 439.751 c
166.9541 439.751 165.459 439.415 164.0127 438.7432 c
162.5664 438.0713 161.3857 437.1709 160.4697 436.043 c
159.5537 434.915 158.9502 433.7998 158.6611 432.6963 c
158.3721 431.5928 158.2275 429.793 158.2275 427.2969 C
158.2275 407.501 L
150.3525 407.501 L
Bb
1 (Unnamed gradient 1) 0 0.000977 0 1 0 39.5 39.5 0 -332108.389 -303608.608 Bg
0 -39.5 193.8125 0.000002 71.3525 446.9873 Xm
0.003719 -311892.045 193.8125 0.000002 71.3486 312339.004 Bc
0 -7.81318 193.8125 0.000002 71.3525 446.9873 Bm
0 -24.7418 193.8125 0.000002 71.3525 439.1743 Bm
0 -6.94505 193.8125 0.000002 71.3525 414.4326 Bm
0.003719 -311892.045 193.8125 0.000002 71.3525 407.4873 Bc
f
0 BB
231.168 423.626 m
204.1455 423.626 L
204.1455 430.251 L
223.1758 430.251 L
222.8877 431.1836 l
221.9248 433.6211 220.4102 435.5342 218.3428 436.9209 c
216.2744 438.3076 213.9668 439.001 211.418 439.001 c
210.6963 439.001 209.9268 438.9287 209.1094 438.7861 c
206.0801 438.2598 203.6514 436.8975 201.8242 434.6982 c
199.9961 432.499 199.083 429.8213 199.083 426.666 c
199.083 423.5107 200.0186 420.7979 201.8906 418.5273 c
203.7627 416.2559 206.2109 414.8818 209.2354 414.4033 c
209.9551 414.2598 210.6748 414.1885 211.3955 414.1885 c
214.2744 414.1885 216.915 415.1514 219.3154 417.0771 C
219.8916 417.5703 L
220.3955 418.0635 L
226.083 413.25 l
224.4512 411.2275 222.3037 409.6387 219.6396 408.4834 c
216.9756 407.3291 214.1553 406.751 211.1797 406.751 c
210.4111 406.751 209.667 406.751 208.9473 406.751 c
208.2754 406.8955 207.7949 406.9912 207.5068 407.0381 c
202.707 407.8525 198.791 410.0693 195.7578 413.6875 c
192.7246 417.3047 191.208 421.5342 191.208 426.374 c
191.208 428.0029 191.376 429.5605 191.7119 431.0469 c
192.8154 436.3652 195.792 440.5342 200.6396 443.5537 c
202.9434 444.9912 205.0078 445.8418 206.832 446.1055 c
208.6563 446.3691 210.2402 446.501 211.584 446.501 c
218.7354 446.501 224.2314 443.5029 228.0723 437.5088 c
230.2793 433.96 231.3838 430.2676 231.3838 426.4316 c
231.3838 425.5195 231.3115 424.585 231.168 423.626 C
Bb
1 (Unnamed gradient 2) -0.000977 0.000977 0 1 0 39.75 39.75 0 -334218.327 -305581.358 Bg
0 -39.75 199.1758 0.000002 111.708 446.5264 Xm
0.003743 -313865.942 199.1758 0.000002 111.7041 314312.473 Bc
0 -10.0467 199.1758 0.000002 111.708 446.5264 Bm
0 -19.2198 199.1758 0.000002 111.708 436.4795 Bm
0 -10.4835 199.1758 0.000002 111.708 417.2598 Bm
0.003743 -313865.942 199.1758 0.000002 111.708 406.7764 Bc
f
0 BB
293.3447 446.376 m
284.7178 446.3691 L
273.041 421.3008 L
261.3633 446.3691 L
257.896 446.3721 L
257.896 446.376 L
247.2417 446.376 L
247.2417 459.3135 L
239.3667 459.3135 L
239.3667 446.376 L
233.9917 446.376 L
233.9917 439.626 L
239.3667 439.626 L
239.3667 407.501 L
247.2417 407.501 L
247.2417 439.626 L
256.019 439.626 L
273.0391 404.7656 L
293.3447 446.376 L
Bb
1 (Unnamed gradient 3) 0.000488 0 0 1 0.000001 54.5479 54.5479 -0.000001 -461603.423 -422393.631 Bg
0.000001 -54.5479 277.5444 0.000003 124.8955 459.3013 Xm
0.005136 -430709.881 277.5444 0.000003 124.8901 431169.162 Bc
0 -10.7897 277.5444 0.000003 124.8955 459.3013 Bm
0 -34.1674 277.5444 0.000003 124.8955 448.5117 Bm
0 -9.59082 277.5444 0.000003 124.8955 414.3447 Bm
0.005136 -430709.881 277.5444 0.000003 124.8955 404.7529 Bc
f
0 BB
*u
0 g
292.0571 426.8086 m
292.0571 432.3281 294.0015 437.0313 297.8901 440.9189 c
301.7793 444.8066 306.5332 446.751 312.1504 446.751 c
314.7422 446.751 317.2402 446.2705 319.6406 445.3105 c
322.041 444.3506 324.2012 442.959 326.123 441.1348 c
328.043 439.3105 329.543 437.127 330.623 434.584 c
331.7031 432.04 332.2441 429.4482 332.2441 426.8086 c
332.2441 421.1445 330.1797 416.3691 326.0508 412.4824 c
324.1777 410.7061 322.041 409.3379 319.6406 408.3779 c
317.2402 407.4189 314.7188 406.9385 312.0781 406.9385 c
306.6523 406.9385 301.9961 408.8096 298.1069 412.5537 c
294.0737 416.4414 292.0571 421.1934 292.0571 426.8086 C
f
1 D
300.0566 426.8086 m
300.0566 423.2598 301.2109 420.3115 303.5195 417.9619 c
305.8281 415.6123 308.7148 414.4385 312.1777 414.4385 c
314.6777 414.4385 316.9395 415.1094 318.959 416.4521 c
320.9785 417.7939 322.4453 419.6162 323.3594 421.918 c
323.7441 422.7813 324.0078 423.6084 324.1523 424.3994 c
324.2969 425.1904 324.3691 426.0654 324.3691 427.0244 c
324.3691 430.3799 323.1914 433.2568 320.834 435.6543 c
318.4766 438.0518 315.5918 439.251 312.1777 439.251 c
308.7617 439.251 305.8887 438.0635 303.5566 435.6904 c
301.2227 433.3174 300.0566 430.3564 300.0566 426.8086 C
Bb
1 (Unnamed gradient 4) 0 0 0 1 0 39.8125 39.8125 0 -334655.723 -306074.91 Bg
0 -39.8125 199.437 0.000002 212.4326 446.7373 Xm
0.003749 -314359.545 199.437 0.000002 212.4287 314806.254 Bc
0 -10.0625 199.437 0.000002 212.4326 446.7373 Bm
0 -19.25 199.437 0.000002 212.4326 436.6748 Bm
0 -10.5 199.437 0.000002 212.4326 417.4248 Bm
0.003749 -314359.545 199.437 0.000002 212.4326 406.9248 Bc
f
0 BB
*U
0 D
337.2871 407.501 m
337.2871 459.3135 L
345.2871 459.3135 L
345.2871 407.501 L
337.2871 407.501 L
Bb
1 (Unnamed gradient 5) 0 0 0 1 0.000001 51.8125 51.8125 -0.000001 -437969.266 -400803.484 Bg
0.000001 -51.8125 215.25 0.000003 233.6616 459.3013 Xm
0.004879 -409111.516 215.25 0.000003 233.6567 409570.797 Bc
0 -13.0955 215.25 0.000003 233.6616 459.3013 Bm
0 -25.0522 215.25 0.000003 233.6616 446.2061 Bm
0 -13.6648 215.25 0.000003 233.6616 421.1538 Bm
0.004879 -409111.516 215.25 0.000003 233.6616 407.4893 Bc
f
0 BB
350.3301 425.583 m
350.3301 446.376 L
358.0176 446.376 L
358.0176 426.6514 L
358.0176 424.3477 l
358.0176 421.3242 358.9932 418.8643 360.9463 416.9688 c
362.8994 415.0732 365.2256 414.126 367.9258 414.126 c
369.5176 414.126 371.0117 414.4619 372.4102 415.1338 c
373.8086 415.8057 374.9785 416.6934 375.918 417.7969 c
376.8574 418.9004 377.4844 420.0527 377.7988 421.2529 c
378.1113 422.4521 378.2695 424.2285 378.2695 426.5801 C
378.2695 446.376 L
386.1445 446.376 L
386.1445 407.501 L
378.2695 407.501 L
378.2695 409.373 L
378.4844 411.6777 L
379.3477 414.126 l
378.5313 412.4033 377.2598 410.8721 375.5313 409.5322 c
374.4746 408.7178 373.1543 408.0723 371.5703 407.5938 c
369.9863 407.1152 368.3789 406.876 366.7461 406.876 c
366.3613 406.876 365.9297 406.8887 365.4502 406.9121 c
364.9697 406.9365 364.3223 407.0205 363.5068 407.1641 c
359.3779 407.9316 356.1504 409.9102 353.8223 413.0996 c
351.4941 416.2891 350.3301 420.4502 350.3301 425.583 C
Bb
1 (Unnamed gradient 6) -0.000488 0 0 1 0 39.5 39.5 0 -331908.411 -303607.973 Bg
0 -39.5 193.8145 0.000002 271.3301 446.3818 Xm
0.003719 -311891.973 193.8145 0.000002 271.3262 312338.358 Bc
0 -9.98351 193.8145 0.000002 271.3301 446.3818 Bm
0 -19.0989 193.8145 0.000002 271.3301 436.3984 Bm
0 -10.4176 193.8145 0.000002 271.3301 417.2998 Bm
0.003719 -311891.973 193.8145 0.000002 271.3301 406.8818 Bc
f
0 BB
*u
1 D
0 g
413.7695 446.376 m
404.4375 446.376 L
404.4375 459.3135 L
396.5625 459.3135 L
396.5625 446.376 L
391.1875 446.376 L
391.1875 439.626 L
396.5625 439.626 L
396.5625 407.501 L
404.4375 407.501 L
404.4375 439.626 L
413.7695 439.626 L
413.7695 407.501 L
421.6445 407.501 L
421.6445 446.3809 L
413.7695 446.3809 L
413.7695 446.376 L
f
413.7695 459.3135 m
413.7695 450.876 L
421.6445 450.876 L
421.6445 459.3135 L
413.7695 459.3135 L
Bb
1 (Unnamed gradient 7) 0 0 0 1 0.000001 51.8125 51.8125 -0.000001 -437904.131 -400803.484 Bg
0.000001 -51.8125 237.707 0.000003 287.5625 459.3013 Xm
0.004879 -409111.516 237.707 0.000003 287.5576 409570.797 Bc
0 -13.0955 237.707 0.000003 287.5625 459.3013 Bm
0 -25.0522 237.707 0.000003 287.5625 446.2061 Bm
0 -13.6648 237.707 0.000003 287.5625 421.1538 Bm
0.004879 -409111.516 237.707 0.000003 287.5625 407.4893 Bc
f
0 BB
*U
*u
0 D
0 g
426.6875 426.8086 m
426.6875 432.3281 428.6328 437.0313 432.5215 440.9189 c
436.4102 444.8066 441.1641 446.751 446.7813 446.751 c
449.373 446.751 451.8711 446.2705 454.2715 445.3105 c
456.6719 444.3506 458.832 442.959 460.7539 441.1348 c
462.6738 439.3105 464.1738 437.127 465.2539 434.584 c
466.334 432.04 466.875 429.4482 466.875 426.8086 c
466.875 421.1445 464.8105 416.3691 460.6816 412.4824 c
458.8086 410.7061 456.6719 409.3379 454.2715 408.3779 c
451.8711 407.4189 449.3496 406.9385 446.709 406.9385 c
441.2832 406.9385 436.627 408.8096 432.7383 412.5537 c
428.7051 416.4414 426.6875 421.1934 426.6875 426.8086 C
f
1 D
434.6875 426.8086 m
434.6875 423.2598 435.8418 420.3115 438.1504 417.9619 c
440.459 415.6123 443.3457 414.4385 446.8086 414.4385 c
449.3086 414.4385 451.5703 415.1094 453.5898 416.4521 c
455.6094 417.7939 457.0762 419.6162 457.9902 421.918 c
458.375 422.7813 458.6387 423.6084 458.7832 424.3994 c
458.9277 425.1904 459 426.0654 459 427.0244 c
459 430.3799 457.8223 433.2568 455.4648 435.6543 c
453.1074 438.0518 450.2227 439.251 446.8086 439.251 c
443.3926 439.251 440.5195 438.0635 438.1875 435.6904 c
435.8535 433.3174 434.6875 430.3564 434.6875 426.8086 C
Bb
1 (Unnamed gradient 8) 0 -0.000977 0 1 0 39.8125 39.8125 0 -334521.108 -306074.91 Bg
0 -39.8125 199.4375 0.000002 347.0625 446.7373 Xm
0.003749 -314359.545 199.4375 0.000002 347.0586 314806.254 Bc
0 -10.0625 199.4375 0.000002 347.0625 446.7373 Bm
0 -19.25 199.4375 0.000002 347.0625 436.6748 Bm
0 -10.5 199.4375 0.000002 347.0625 417.4248 Bm
0.003749 -314359.545 199.4375 0.000002 347.0625 406.9248 Bc
f
0 BB
*U
0 D
471.918 407.501 m
471.918 446.3809 L
479.793 446.3809 L
479.793 444.5068 l
479.793 443.3057 479.5762 442.1289 479.1426 440.9756 C
478.709 439.751 l
479.5254 441.5693 480.7969 443.1006 482.5254 444.3447 c
483.582 445.1582 484.9023 445.8047 486.4863 446.2832 c
488.0703 446.7617 489.6777 447.001 491.3105 447.001 c
491.8379 447.001 492.2949 447.001 492.6797 447.001 c
493.0625 447.001 493.6875 446.9043 494.5508 446.7129 c
498.6797 445.9453 501.9082 443.9668 504.2363 440.7773 c
506.5645 437.5879 507.7305 433.4268 507.7305 428.2939 C
507.7305 407.501 L
500.043 407.501 L
500.043 427.2256 L
500.043 429.5293 l
500.043 432.5527 499.0664 435.0117 497.1133 436.9072 c
495.1602 438.8027 492.8105 439.751 490.0625 439.751 c
488.5195 439.751 487.0234 439.415 485.5781 438.7432 c
484.1309 438.0713 482.9512 437.1709 482.0352 436.043 c
481.1191 434.915 480.5156 433.7998 480.2266 432.6963 c
479.9375 431.5928 479.793 429.793 479.793 427.2969 C
479.793 407.501 L
471.918 407.501 L
Bb
1 (Unnamed gradient 9) 0 0 0 1 0 39.5 39.5 0 -331786.827 -303608.608 Bg
0 -39.5 193.8125 0.000002 392.918 446.9873 Xm
0.003719 -311892.045 193.8125 0.000002 392.9141 312339.004 Bc
0 -9.98351 193.8125 0.000002 392.918 446.9873 Bm
0 -19.0989 193.8125 0.000002 392.918 437.0039 Bm
0 -10.4176 193.8125 0.000002 392.918 417.9053 Bm
0.003719 -311892.045 193.8125 0.000002 392.918 407.4873 Bc
f
0 BB
*u
1 D
0 g
132.8813 446.4043 m
100.3179 446.4043 l
98.5737 446.4043 97.1592 444.9897 97.1592 443.2456 C
97.1592 410.6826 l
97.1592 408.9385 98.5737 407.5244 100.3179 407.5244 C
132.8813 407.5244 l
134.6255 407.5244 136.04 408.9385 136.04 410.6826 C
136.04 443.2456 l
136.04 444.9897 134.6255 446.4043 132.8813 446.4043 C
f
0 D
128.0938 422.3486 m
122.5361 416.793 l
122.1846 416.4404 121.8989 416.5596 121.8979 417.0557 C
121.897 426.6123 l
121.8979 427.1079 121.6108 427.2285 121.2603 426.877 C
109.4805 415.0967 l
109.1299 414.7471 108.5562 414.7471 108.2061 415.0967 C
104.7314 418.5713 l
104.3813 418.9209 104.3813 419.4941 104.7319 419.8447 C
116.5117 431.625 l
116.8628 431.9756 116.7432 432.2627 116.248 432.2627 C
106.6919 432.2627 l
106.1968 432.2627 106.0776 432.5474 106.4292 432.8989 C
111.9858 438.4561 l
112.3379 438.8066 113.0288 439.0942 113.5249 439.0942 C
127.8276 439.0942 l
128.3218 439.0933 128.7275 438.688 128.729 438.1929 C
128.7295 423.8882 l
128.73 423.3921 128.4438 422.7002 128.0938 422.3486 C
Bb
1 (Unnamed gradient 10) 0 0 0 1 0 38.8799 38.8799 0 -326819.661 -298713.441 Bg
0 -38.8799 194.4004 0.000002 19.3994 446.416 Xm
0.003661 -306995.545 194.4004 0.000002 19.396 307441.942 Bc
0 -7.69052 194.4004 0.000002 19.3994 446.416 Bm
0 -24.3533 194.4004 0.000002 19.3994 438.7256 Bm
0 -6.83602 194.4004 0.000002 19.3994 414.3721 Bm
0.003661 -306995.545 194.4004 0.000002 19.3994 407.5361 Bc
f
0 BB
*U
*u
0 g
139.4775 406.5479 m
139.4775 405.1904 138.373 404.0859 137.0156 404.0859 C
96.1831 404.0859 l
94.8257 404.0859 93.7212 405.1904 93.7212 406.5479 C
93.7212 447.3809 l
93.7212 448.0381 93.9771 448.6563 94.4419 449.1211 c
94.9067 449.5859 95.5254 449.8423 96.1831 449.8423 C
137.0156 449.8423 l
138.373 449.8423 139.4775 448.7383 139.4775 447.3809 C
139.4775 406.5479 L
f
1 D
142.4775 447.3809 m
142.4775 450.3921 140.0273 452.8423 137.0156 452.8423 C
96.1831 452.8423 l
94.7236 452.8423 93.3521 452.2739 92.3203 451.2422 c
91.2891 450.2104 90.7212 448.8394 90.7212 447.3809 C
90.7212 406.5479 l
90.7212 403.5361 93.1714 401.0859 96.1831 401.0859 C
137.0156 401.0859 l
140.0273 401.0859 142.4775 403.5361 142.4775 406.5479 C
142.4775 447.3809 L
Bb
1 (Unnamed gradient 11) 0.000488 0 0 1 0.000001 51.7563 51.7563 -0.000001 -437710.381 -400353.828 Bg
0.000001 -51.7563 258.7817 0.000003 -12.7915 452.8301 Xm
0.004873 -408668.162 258.7817 0.000003 -12.7964 409120.984 Bc
0 -15.3563 258.7817 0.000003 -12.7915 452.8301 Bm
0 -27.3001 258.7817 0.000003 -12.7915 437.4736 Bm
0 -9.10001 258.7817 0.000003 -12.7915 410.1738 Bm
0.004873 -408668.162 258.7817 0.000003 -12.7915 401.0732 Bc
f
0 BB
*U
*u
0.47451 0.341177 0.192157 0 k
321.0273 387.6943 m
321.3213 387.3311 321.7285 387.0088 322.249 386.7324 c
322.7695 386.4561 323.2539 386.3164 323.7051 386.3164 c
324.0508 386.3164 324.4063 386.3945 324.7715 386.5498 c
325.1348 386.7061 325.4639 386.9189 325.7588 387.1875 c
326.0527 387.4561 326.292 387.7803 326.4736 388.1631 c
326.6563 388.5439 326.7461 388.9678 326.7461 389.4365 c
326.7461 390.0947 326.543 390.6846 326.1357 391.2041 c
325.7285 391.7246 325.083 392.1318 324.1992 392.4268 c
323.54 392.6514 323.0898 392.8857 322.8467 393.1279 c
322.6035 393.3711 322.4824 393.6484 322.4824 393.96 c
322.4824 394.3076 322.6035 394.6104 322.8467 394.8701 c
323.0898 395.1299 323.3838 395.2607 323.7305 395.2607 c
324.1113 395.2607 324.4199 395.1563 324.6543 394.9482 c
324.8877 394.7402 325.1523 394.4453 325.4473 394.0645 C
326.4609 395.1563 l
325.8711 395.7979 325.3818 396.2178 324.9922 396.417 c
324.6016 396.6162 324.1729 396.7158 323.7051 396.7158 c
323.3574 396.7158 323.0195 396.6377 322.6914 396.4824 c
322.3613 396.3271 322.0664 396.1143 321.8066 395.8447 c
321.5469 395.5771 321.334 395.2646 321.1699 394.9092 c
321.0049 394.5537 320.9229 394.1855 320.9229 393.8037 c
320.9229 393.1455 321.0918 392.6172 321.4297 392.2178 c
321.7676 391.8193 322.3701 391.4463 323.2363 391.1006 c
323.6006 390.9619 323.9043 390.8271 324.1465 390.6973 c
324.3887 390.5674 324.5801 390.4326 324.7188 390.2939 c
324.8574 390.1553 324.9531 390.0039 325.0049 389.8389 c
325.0566 389.6748 325.083 389.4795 325.083 389.2549 c
325.083 388.873 324.957 388.5479 324.7061 388.2793 c
324.4551 388.0107 324.1211 387.876 323.7051 387.876 c
323.4102 387.876 323.1113 387.9629 322.8076 388.1357 c
322.5039 388.3096 322.2402 388.5176 322.0146 388.7607 C
321.0273 387.6943 L
f
308.6973 386.4727 m
310.3613 386.7842 L
310.3613 392.1406 l
310.3613 392.9727 310.5996 393.665 311.0762 394.2197 c
311.5527 394.7744 312.1992 395.0518 313.0137 395.0518 c
313.7246 395.0518 314.2656 394.8057 314.6387 394.3115 c
315.0117 393.8174 315.1973 393.1279 315.1973 392.2451 C
315.1973 386.4727 L
316.8613 386.7842 L
316.8613 393.0498 l
316.8613 394.1943 316.5273 395.0908 315.8613 395.7412 c
315.1934 396.3916 314.2871 396.7158 313.1436 396.7158 c
312.5195 396.7158 311.9902 396.6084 311.5576 396.3916 c
311.124 396.1748 310.6914 395.8408 310.2578 395.3906 C
310.2578 396.5605 L
308.6973 396.249 L
308.6973 386.4727 L
f
294.5908 389.5664 m
294.8506 388.9424 295.2148 388.3916 295.6826 387.915 c
296.1509 387.4385 296.7007 387.0527 297.3335 386.7588 c
297.9663 386.4639 298.6553 386.3164 299.4004 386.3164 c
300.1455 386.3164 300.834 386.4639 301.4678 386.7588 c
302.0996 387.0527 302.6504 387.4385 303.1191 387.915 c
303.5859 388.3916 303.9512 388.9424 304.2109 389.5664 c
304.4707 390.1904 304.6006 390.8408 304.6006 391.5166 c
304.6006 392.1924 304.4707 392.8428 304.2109 393.4658 c
303.9512 394.0908 303.5859 394.6406 303.1191 395.1172 c
302.6504 395.5938 302.0996 395.9795 301.4678 396.2744 c
300.834 396.5693 300.1455 396.7158 299.4004 396.7158 c
298.6553 396.7158 297.9663 396.5693 297.3335 396.2744 c
296.7007 395.9795 296.1509 395.5938 295.6826 395.1172 c
295.2148 394.6406 294.8506 394.0908 294.5908 393.4658 c
294.3306 392.8428 294.2007 392.1924 294.2007 391.5166 c
294.2007 390.8408 294.3306 390.1904 294.5908 389.5664 C
f
0 D
296.1245 392.9072 m
296.2979 393.3496 296.5405 393.7393 296.8525 394.0771 c
297.1646 394.415 297.5371 394.6797 297.9707 394.8701 c
298.4038 395.0615 298.8809 395.1563 299.4004 395.1563 c
299.9199 395.1563 300.3965 395.0615 300.8301 394.8701 c
301.2637 394.6797 301.6367 394.415 301.9492 394.0771 c
302.2607 393.7393 302.5039 393.3496 302.6768 392.9072 c
302.8496 392.4658 302.9365 392.001 302.9365 391.5166 c
302.9365 391.0137 302.8496 390.5459 302.6768 390.1123 c
302.5039 389.6787 302.2607 389.2939 301.9492 388.9561 c
301.6367 388.6172 301.2637 388.3525 300.8301 388.1631 c
300.3965 387.9717 299.9199 387.876 299.4004 387.876 c
298.8809 387.876 298.4038 387.9717 297.9707 388.1631 c
297.5371 388.3525 297.1646 388.6172 296.8525 388.9561 c
296.5405 389.2939 296.2979 389.6787 296.1245 390.1123 c
295.9512 390.5459 295.8647 391.0137 295.8647 391.5166 c
295.8647 392.001 295.9512 392.4658 296.1245 392.9072 C
f
1 D
289.3438 401.4482 m
287.9917 400.0967 L
289.3438 398.7451 L
290.6958 400.0967 L
289.3438 401.4482 L
f
288.5117 386.4727 m
290.1758 386.7842 L
290.1758 396.5605 L
288.5117 396.249 L
288.5117 386.4727 L
f
284.8613 388.1357 m
284.7744 388.1191 284.6797 388.1064 284.5757 388.0977 c
284.4717 388.0889 284.3413 388.085 284.1855 388.085 c
283.7173 388.085 283.3882 388.1846 283.1973 388.3838 c
283.0063 388.583 282.9116 388.8555 282.9116 389.2021 C
282.9116 394.9482 L
285.1216 394.9482 L
285.1216 396.4043 L
282.9116 396.4043 L
282.9116 399.8877 L
281.2476 399.6025 L
281.2476 396.4043 L
280.7534 396.4043 L
280.5713 394.9482 L
281.2476 394.9482 L
281.2476 389.0723 l
281.2476 388.3613 281.4468 387.7764 281.8457 387.3174 c
282.2441 386.8584 282.9546 386.6279 283.9775 386.6279 c
284.064 386.6279 284.1553 386.6318 284.2505 386.6416 c
284.3457 386.6494 284.4453 386.6631 284.5493 386.6807 C
284.8613 388.1357 L
f
268.8794 389.7227 m
268.8794 389.1162 268.9873 388.5957 269.2041 388.1631 c
269.4209 387.7295 269.6938 387.3779 270.0234 387.1094 c
270.3525 386.8408 270.7163 386.6416 271.1152 386.5107 c
271.5137 386.3818 271.8955 386.3164 272.2593 386.3164 c
273.2993 386.3164 274.2095 386.7754 274.9893 387.6943 C
274.9893 386.4727 L
276.5493 386.7842 L
276.5493 396.5605 L
274.8853 396.249 L
274.8853 390.6064 l
274.8853 390.2764 274.8335 389.9561 274.7295 389.6445 c
274.6255 389.333 274.4692 389.0498 274.2612 388.7998 c
274.0532 388.5479 273.7935 388.3486 273.4814 388.2021 c
273.1694 388.0537 272.814 387.9805 272.4155 387.9805 c
271.8433 387.9805 271.3882 388.1885 271.0503 388.6045 c
270.7124 389.0205 270.5435 389.5049 270.5435 390.0605 C
270.5435 396.5605 L
268.8794 396.249 L
268.8794 389.7227 L
f
262.5664 405.3486 m
262.5664 386.4727 L
264.2305 386.7842 L
264.2305 405.6611 L
262.5664 405.3486 L
f
248.4878 389.5664 m
248.7476 388.9424 249.1118 388.3916 249.5796 387.915 c
250.0479 387.4385 250.5977 387.0527 251.2305 386.7588 c
251.8633 386.4639 252.5522 386.3164 253.2979 386.3164 c
254.0425 386.3164 254.7314 386.4639 255.3647 386.7588 c
255.9971 387.0527 256.5479 387.4385 257.0156 387.915 c
257.4834 388.3916 257.8477 388.9424 258.1074 389.5664 c
258.3677 390.1904 258.4976 390.8408 258.4976 391.5166 c
258.4976 392.1924 258.3677 392.8428 258.1074 393.4658 c
257.8477 394.0908 257.4834 394.6406 257.0156 395.1172 c
256.5479 395.5938 255.9971 395.9795 255.3647 396.2744 c
254.7314 396.5693 254.0425 396.7158 253.2979 396.7158 c
252.5522 396.7158 251.8633 396.5693 251.2305 396.2744 c
250.5977 395.9795 250.0479 395.5938 249.5796 395.1172 c
249.1118 394.6406 248.7476 394.0908 248.4878 393.4658 c
248.2275 392.8428 248.0977 392.1924 248.0977 391.5166 c
248.0977 390.8408 248.2275 390.1904 248.4878 389.5664 C
f
0 D
250.0215 392.9072 m
250.1948 393.3496 250.4375 393.7393 250.7495 394.0771 c
251.0615 394.415 251.4341 394.6797 251.8677 394.8701 c
252.3008 395.0615 252.7778 395.1563 253.2979 395.1563 c
253.8174 395.1563 254.2939 395.0615 254.7275 394.8701 c
255.1606 394.6797 255.5337 394.415 255.8457 394.0771 c
256.1577 393.7393 256.4004 393.3496 256.5737 392.9072 c
256.7466 392.4658 256.8335 392.001 256.8335 391.5166 c
256.8335 391.0137 256.7466 390.5459 256.5737 390.1123 c
256.4004 389.6787 256.1577 389.2939 255.8457 388.9561 c
255.5337 388.6172 255.1606 388.3525 254.7275 388.1631 c
254.2939 387.9717 253.8174 387.876 253.2979 387.876 c
252.7778 387.876 252.3008 387.9717 251.8677 388.1631 c
251.4341 388.3525 251.0615 388.6172 250.7495 388.9561 c
250.4375 389.2939 250.1948 389.6787 250.0215 390.1123 c
249.8481 390.5459 249.7617 391.0137 249.7617 391.5166 c
249.7617 392.001 249.8481 392.4658 250.0215 392.9072 C
f
1 D
238.8911 387.6943 m
239.1855 387.3311 239.5933 387.0088 240.1133 386.7324 c
240.6333 386.4561 241.1182 386.3164 241.5688 386.3164 c
241.9155 386.3164 242.271 386.3945 242.6353 386.5498 c
242.999 386.7061 243.3281 386.9189 243.623 387.1875 c
243.9175 387.4561 244.1563 387.7803 244.3379 388.1631 c
244.52 388.5439 244.6108 388.9678 244.6108 389.4365 c
244.6108 390.0947 244.4072 390.6846 244 391.2041 c
243.5928 391.7246 242.9473 392.1318 242.063 392.4268 c
241.4043 392.6514 240.9536 392.8857 240.7109 393.1279 c
240.4683 393.3711 240.3472 393.6484 240.3472 393.96 c
240.3472 394.3076 240.4683 394.6104 240.7109 394.8701 c
240.9536 395.1299 241.248 395.2607 241.5952 395.2607 c
241.9761 395.2607 242.2842 395.1563 242.5181 394.9482 c
242.752 394.7402 243.0161 394.4453 243.311 394.0645 C
244.3252 395.1563 l
243.7358 395.7979 243.2461 396.2178 242.856 396.417 c
242.4663 396.6162 242.0371 396.7158 241.5688 396.7158 c
241.2222 396.7158 240.8843 396.6377 240.5552 396.4824 c
240.2256 396.3271 239.9312 396.1143 239.6709 395.8447 c
239.4111 395.5771 239.1987 395.2646 239.0342 394.9092 c
238.8691 394.5537 238.7871 394.1855 238.7871 393.8037 c
238.7871 393.1455 238.9561 392.6172 239.2939 392.2178 c
239.6318 391.8193 240.2344 391.4463 241.1011 391.1006 c
241.4648 390.9619 241.7681 390.8271 242.0112 390.6973 c
242.2534 390.5674 242.4443 390.4326 242.583 390.2939 c
242.7217 390.1553 242.8169 390.0039 242.8691 389.8389 c
242.9209 389.6748 242.9473 389.4795 242.9473 389.2549 c
242.9473 388.873 242.8213 388.5479 242.5703 388.2793 c
242.3188 388.0107 241.9849 387.876 241.5688 387.876 c
241.2739 387.876 240.9751 387.9629 240.6719 388.1357 c
240.3687 388.3096 240.104 388.5176 239.8789 388.7607 C
238.8911 387.6943 L
f
227.3735 388.1357 m
227.2866 388.1191 227.1919 388.1064 227.0879 388.0977 c
226.9839 388.0889 226.8535 388.085 226.6978 388.085 c
226.2295 388.085 225.9004 388.1846 225.7095 388.3838 c
225.5186 388.583 225.4238 388.8555 225.4238 389.2021 C
225.4238 394.9482 L
227.6338 394.9482 L
227.6338 396.4043 L
225.4238 396.4043 L
225.4238 399.8877 L
223.7598 399.6025 L
223.7598 396.4043 L
223.2656 396.4043 L
223.0835 394.9482 L
223.7598 394.9482 L
223.7598 389.0723 l
223.7598 388.3613 223.959 387.7764 224.3579 387.3174 c
224.7563 386.8584 225.4668 386.6279 226.4897 386.6279 c
226.5762 386.6279 226.6675 386.6318 226.7627 386.6416 c
226.8579 386.6494 226.9575 386.6631 227.0615 386.6807 C
227.3735 388.1357 L
f
0 D
212.1348 391.2822 m
212.1001 391.3691 212.083 391.46 212.083 391.5557 c
212.083 391.6504 212.083 391.7412 212.083 391.8291 c
212.083 392.3311 212.1909 392.79 212.4077 393.2061 c
212.6245 393.6221 212.9058 393.9814 213.2529 394.2861 c
213.5996 394.5889 213.9849 394.8271 214.4102 395.001 c
214.8345 395.1729 215.2549 395.2607 215.6709 395.2607 c
216.0693 395.2607 216.4463 395.2002 216.8018 395.0791 c
217.1567 394.957 217.4819 394.7314 217.7769 394.4023 C
212.1348 391.2822 L
f
1 D
220.1167 393.9346 m
219.9258 394.3154 219.688 394.6748 219.4019 395.0127 c
219.1157 395.3516 218.791 395.6455 218.4268 395.8975 c
218.063 396.1484 217.6553 396.3486 217.2051 396.4951 c
216.7539 396.6426 216.2598 396.7158 215.7231 396.7158 c
214.9775 396.7158 214.2886 396.5693 213.6558 396.2744 c
213.0229 395.9795 212.4731 395.5938 212.0049 395.1172 c
211.5371 394.6406 211.1729 394.0908 210.9131 393.4658 c
210.6528 392.8428 210.5229 392.1924 210.5229 391.5166 c
210.5229 390.8408 210.6528 390.1904 210.9131 389.5664 c
211.1729 388.9424 211.5371 388.3916 212.0049 387.915 c
212.4731 387.4385 213.0229 387.0527 213.6558 386.7588 c
214.2886 386.4639 214.9775 386.3164 215.7231 386.3164 c
216.1909 386.3164 216.7109 386.3945 217.2827 386.5498 c
217.855 386.7061 218.4268 386.9404 218.999 387.2529 C
218.687 388.8389 l
218.1841 388.5264 217.6899 388.2881 217.2051 388.124 c
216.7192 387.958 216.2256 387.876 215.7231 387.876 c
215.0469 387.876 214.4229 388.0713 213.8511 388.4619 c
213.2788 388.8516 212.854 389.3232 212.5771 389.8779 C
220.1167 393.9346 L
f
198.3032 386.4727 m
199.9673 386.7842 L
199.9673 392.1406 l
199.9673 392.9727 200.2051 393.665 200.6821 394.2197 c
201.1587 394.7744 201.8042 395.0518 202.6191 395.0518 c
203.3296 395.0518 203.8711 394.8057 204.2441 394.3115 c
204.6167 393.8174 204.8032 393.1279 204.8032 392.2451 C
204.8032 386.4727 L
206.4673 386.7842 L
206.4673 393.0498 l
206.4673 394.1943 206.1333 395.0908 205.4663 395.7412 c
204.7988 396.3916 203.8931 396.7158 202.749 396.7158 c
202.125 396.7158 201.5962 396.6084 201.1631 396.3916 c
200.7295 396.1748 200.2964 395.8408 199.8633 395.3906 C
199.8633 396.5605 L
198.3032 396.249 L
198.3032 386.4727 L
f
190.3638 386.4727 m
191.9238 386.7842 L
191.9238 390.6318 l
191.9238 392.0186 192.1616 393.0596 192.6387 393.7529 c
193.1152 394.4453 193.7783 394.8613 194.6279 395.001 C
194.8877 396.5605 l
194.3848 396.5605 193.8906 396.4434 193.4058 396.21 c
192.9204 395.9756 192.4263 395.5811 191.9238 395.0264 C
191.9238 396.5605 L
190.3638 396.249 L
190.3638 386.4727 L
f
0 D
178.9907 391.2822 m
178.9561 391.3691 178.939 391.46 178.939 391.5557 c
178.939 391.6504 178.939 391.7412 178.939 391.8291 c
178.939 392.3311 179.0469 392.79 179.2637 393.2061 c
179.4805 393.6221 179.7617 393.9814 180.1089 394.2861 c
180.4556 394.5889 180.8408 394.8271 181.2661 395.001 c
181.6904 395.1729 182.1108 395.2607 182.5269 395.2607 c
182.9253 395.2607 183.3022 395.2002 183.6577 395.0791 c
184.0127 394.957 184.3379 394.7314 184.6328 394.4023 C
178.9907 391.2822 L
f
1 D
186.9727 393.9346 m
186.7817 394.3154 186.5439 394.6748 186.2578 395.0127 c
185.9717 395.3516 185.647 395.6455 185.2827 395.8975 c
184.9189 396.1484 184.5112 396.3486 184.061 396.4951 c
183.6099 396.6426 183.1157 396.7158 182.5791 396.7158 c
181.8335 396.7158 181.1445 396.5693 180.5117 396.2744 c
179.8789 395.9795 179.3291 395.5938 178.8608 395.1172 c
178.3931 394.6406 178.0288 394.0908 177.769 393.4658 c
177.5088 392.8428 177.3789 392.1924 177.3789 391.5166 c
177.3789 390.8408 177.5088 390.1904 177.769 389.5664 c
178.0288 388.9424 178.3931 388.3916 178.8608 387.915 c
179.3291 387.4385 179.8789 387.0527 180.5117 386.7588 c
181.1445 386.4639 181.8335 386.3164 182.5791 386.3164 c
183.0469 386.3164 183.5669 386.3945 184.1387 386.5498 c
184.7109 386.7061 185.2827 386.9404 185.855 387.2529 C
185.543 388.8389 l
185.04 388.5264 184.5459 388.2881 184.061 388.124 c
183.5752 387.958 183.0815 387.876 182.5791 387.876 c
181.9028 387.876 181.2788 388.0713 180.707 388.4619 c
180.1348 388.8516 179.71 389.3232 179.4331 389.8779 C
186.9727 393.9346 L
f
174.4492 388.1357 m
174.3623 388.1191 174.2676 388.1064 174.1636 388.0977 c
174.0596 388.0889 173.9292 388.085 173.7734 388.085 c
173.3052 388.085 172.9761 388.1846 172.7852 388.3838 c
172.5942 388.583 172.4995 388.8555 172.4995 389.2021 C
172.4995 394.9482 L
174.7095 394.9482 L
174.7095 396.4043 L
172.4995 396.4043 L
172.4995 399.8877 L
170.8354 399.6025 L
170.8354 396.4043 L
170.3413 396.4043 L
170.1592 394.9482 L
170.8354 394.9482 L
170.8354 389.0723 l
170.8354 388.3613 171.0347 387.7764 171.4336 387.3174 c
171.832 386.8584 172.5425 386.6279 173.5654 386.6279 c
173.6519 386.6279 173.7432 386.6318 173.8384 386.6416 c
173.9336 386.6494 174.0332 386.6631 174.1372 386.6807 C
174.4492 388.1357 L
f
158.0591 386.4727 m
159.7231 386.7842 L
159.7231 392.1406 l
159.7231 392.9727 159.9609 393.665 160.438 394.2197 c
160.9146 394.7744 161.5601 395.0518 162.375 395.0518 c
163.0854 395.0518 163.627 394.8057 164 394.3115 c
164.3726 393.8174 164.5591 393.1279 164.5591 392.2451 C
164.5591 386.4727 L
166.2231 386.7842 L
166.2231 393.0498 l
166.2231 394.1943 165.8892 395.0908 165.2222 395.7412 c
164.5547 396.3916 163.6489 396.7158 162.5049 396.7158 c
161.8809 396.7158 161.3521 396.6084 160.9189 396.3916 c
160.4854 396.1748 160.0522 395.8408 159.6191 395.3906 C
159.6191 396.5605 L
158.0591 396.249 L
158.0591 386.4727 L
f
152.5366 401.4482 m
151.1846 400.0967 L
152.5366 398.7451 L
153.8887 400.0967 L
152.5366 401.4482 L
f
151.7046 386.4727 m
153.3687 386.7842 L
153.3687 396.5605 L
151.7046 396.249 L
151.7046 386.4727 L
f
*U
U
LB
%AI5_EndLayer--
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_Illustrator_AI5 /terminate get exec
Adobe_shading_AI8 /terminate get exec
Adobe_ColorImage_AI6 /terminate get exec
AGM_Gradient /terminate get exec
Adobe_cshow /terminate get exec
Adobe_level2_AI5 /terminate get exec
%%EOF
